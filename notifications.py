import smtplib
import streamlit as st
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import requests
import os

class NotificationManager:
    def __init__(self):
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        self.email = os.getenv("NOTIFICATION_EMAIL", "your-email@gmail.com")
        self.password = os.getenv("NOTIFICATION_PASSWORD", "your-app-password")
        self.sms_api_key = os.getenv("SMS_API_KEY", "")
        self.sms_api_url = "https://api.sms.ru/sms/send"
    
    def send_email(self, to_email: str, subject: str, body: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email
            msg['To'] = to_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email, self.password)
            
            text = msg.as_string()
            server.sendmail(self.email, to_email, text)
            server.quit()
            
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
            return False
    
    def send_sms(self, phone: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not self.sms_api_key:
                st.warning("SMS API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            clean_phone = ''.join(filter(str.isdigit, phone))
            if clean_phone.startswith('7'):
                clean_phone = clean_phone[1:]
            if not clean_phone.startswith('7'):
                clean_phone = '7' + clean_phone
            
            data = {
                'api_id': self.sms_api_key,
                'to': clean_phone,
                'msg': message,
                'json': 1
            }
            
            response = requests.post(self.sms_api_url, data=data)
            result = response.json()
            
            if result.get('status') == 'OK':
                return True
            else:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {result.get('status_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {str(e)}")
            return False
    
    def send_appointment_reminder(self, patient_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            subject = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ - {patient_data['date_visit']}"
            body = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {patient_data['full_name']}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –í–∞—à–µ–π –∑–∞–ø–∏—Å–∏:
üìÖ –î–∞—Ç–∞: {patient_data['date_visit']}
‚è∞ –í—Ä–µ–º—è: {patient_data['appointment_time']}
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {patient_data['doctor_name']}
üè• –£—Å–ª—É–≥–∞: {patient_data['service']}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¶–µ–Ω—Ç—Ä
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
            email_sent = False
            if patient_data.get('email'):
                email_sent = self.send_email(patient_data['email'], subject, body)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
            sms_sent = False
            if patient_data.get('phone'):
                sms_message = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–ø–∏—Å—å –Ω–∞ {patient_data['date_visit']} –≤ {patient_data['appointment_time']} –∫ {patient_data['doctor_name']}"
                sms_sent = self.send_sms(patient_data['phone'], sms_message)
            
            return email_sent or sms_sent
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
            return False
    
    def send_appointment_confirmation(self, patient_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            subject = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - {patient_data['date_visit']}"
            body = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {patient_data['full_name']}!

–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:
üìÖ –î–∞—Ç–∞: {patient_data['date_visit']}
‚è∞ –í—Ä–µ–º—è: {patient_data['appointment_time']}
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {patient_data['doctor_name']}
üè• –£—Å–ª—É–≥–∞: {patient_data['service']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {patient_data.get('service_cost', 0)} ‚Ç∏

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¶–µ–Ω—Ç—Ä
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
            email_sent = False
            if patient_data.get('email'):
                email_sent = self.send_email(patient_data['email'], subject, body)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
            sms_sent = False
            if patient_data.get('phone'):
                sms_message = f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {patient_data['date_visit']} –≤ {patient_data['appointment_time']} –∫ {patient_data['doctor_name']}"
                sms_sent = self.send_sms(patient_data['phone'], sms_message)
            
            return email_sent or sms_sent
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            db = get_database()
            df = db.get_all_patients()
            
            if df.empty:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow = datetime.now().date() + timedelta(days=1)
            tomorrow_appointments = df[df['date_visit'].dt.date == tomorrow]
            
            sent_count = 0
            for _, appointment in tomorrow_appointments.iterrows():
                patient_data = {
                    'full_name': appointment['full_name'],
                    'email': appointment.get('email', ''),
                    'phone': appointment['phone'],
                    'date_visit': appointment['date_visit'].strftime('%d.%m.%Y'),
                    'appointment_time': appointment['appointment_time'],
                    'doctor_name': appointment['doctor_name'],
                    'service': appointment['service'],
                    'service_cost': appointment.get('service_cost', 0)
                }
                
                if self.send_appointment_reminder(patient_data):
                    sent_count += 1
            
            return sent_count
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")
            return 0

def show_notification_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.subheader("üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
    st.subheader("üìß Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        email_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True)
        email_address = st.text_input("Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", value="admin@medical-center.com")
    
    with col2:
        smtp_server = st.text_input("SMTP —Å–µ—Ä–≤–µ—Ä", value="smtp.gmail.com")
        smtp_port = st.number_input("SMTP –ø–æ—Ä—Ç", value=587)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMS
    st.subheader("üì± SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        sms_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=False)
        sms_api_key = st.text_input("SMS API –∫–ª—é—á", type="password")
    
    with col2:
        sms_provider = st.selectbox("SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä", ["sms.ru", "smsc.ru", "smsaero.ru"])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    st.subheader("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        reminder_hours = st.number_input("–ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", value=24, min_value=1, max_value=168)
        daily_reminder_time = st.time_input("–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", value=datetime.now().time())
    
    with col2:
        confirmation_enabled = st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", value=True)
        reminder_enabled = st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", value=True)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìß –¢–µ—Å—Ç email"):
            notification_manager = NotificationManager()
            if notification_manager.send_email(email_address, "–¢–µ—Å—Ç", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                st.success("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email")
    
    with col2:
        if st.button("üì± –¢–µ—Å—Ç SMS"):
            phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞", placeholder="+7 (777) 123-45-67")
            if phone:
                notification_manager = NotificationManager()
                if notification_manager.send_sms(phone, "–¢–µ—Å—Ç–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                    st.success("SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
    
    with col3:
        if st.button("üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"):
            notification_manager = NotificationManager()
            sent_count = notification_manager.send_daily_reminders()
            st.success(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {sent_count}")

def show_notification_log():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.subheader("üìã –õ–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    st.info("–õ–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@st.cache_resource
def get_notification_manager():
    return NotificationManager()

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å notification_manager.py
def send_email_notification(to_email: str, subject: str, body: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    manager = NotificationManager()
    return manager.send_email(to_email, subject, body)

def send_sms_notification(phone: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    manager = NotificationManager()
    return manager.send_sms(phone, message)
