#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Jardem
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–æ–¥—É–ª–µ–π
"""

import sys
import os
import sqlite3
import traceback
from datetime import datetime, date, time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        conn.close()
        return True, f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {len(tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}"

def test_user_authentication():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        from database import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]
        
        required_columns = ['id', 'username', 'password_hash', 'access_level']
        missing_columns = [col for col in required_columns if col not in column_names]
        
        conn.close()
        
        if missing_columns:
            return False, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}"
        
        return True, f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}"

def test_crm_functions():
    """–¢–µ—Å—Ç CRM —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        from database import (
            search_clients, get_all_doctors, get_all_services, 
            get_appointments_by_date_range, create_appointment
        )
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients = search_clients("")
        clients_ok = len(clients) >= 0
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π
        doctors = get_all_doctors()
        doctors_ok = len(doctors) >= 0
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥
        services = get_all_services()
        services_ok = len(services) >= 0
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–µ–º–æ–≤
        today = date.today()
        appointments = get_appointments_by_date_range(today, today)
        appointments_ok = len(appointments) >= 0
        
        if all([clients_ok, doctors_ok, services_ok, appointments_ok]):
            return True, f"‚úÖ CRM: –∫–ª–∏–µ–Ω—Ç—ã({len(clients)}), –≤—Ä–∞—á–∏({len(doctors)}), —É—Å–ª—É–≥–∏({len(services)}), –ø—Ä–∏–µ–º—ã({len(appointments)})"
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –≤ CRM —Ñ—É–Ω–∫—Ü–∏—è—Ö"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ CRM: {e}"

def test_analytics_functions():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        from database import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
        cursor.execute('''
            SELECT COUNT(*) FROM appointments 
            WHERE appointment_date >= date('now', '-30 days')
        ''')
        appointments_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM clients')
        clients_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM doctors')
        doctors_count = cursor.fetchone()[0]
        
        conn.close()
        
        return True, f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ø—Ä–∏–µ–º—ã({appointments_count}), –∫–ª–∏–µ–Ω—Ç—ã({clients_count}), –≤—Ä–∞—á–∏({doctors_count})"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}"

def test_directories_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    try:
        from database import (
            search_clients, get_all_doctors, get_all_services,
            create_client
        )
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        clients = search_clients("")
        doctors = get_all_doctors()
        services = get_all_services()
        
        return True, f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: –∫–ª–∏–µ–Ω—Ç—ã({len(clients)}), –≤—Ä–∞—á–∏({len(doctors)}), —É—Å–ª—É–≥–∏({len(services)})"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}"

def test_user_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        from database import get_all_users, create_user, update_user_password
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        users_ok = len(users) >= 0
        
        return True, f"‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}"

def test_audit_functions():
    """–¢–µ—Å—Ç –∞—É–¥–∏—Ç–∞"""
    try:
        from database import get_connection, log_audit_action
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        log_audit_action(1, 'TEST', 'system', 0, '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ SQL
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM audit_log')
        logs_count = cursor.fetchone()[0]
        conn.close()
        
        return True, f"‚úÖ –ê—É–¥–∏—Ç: {logs_count} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: {e}"

def test_backup_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        from database import get_connection
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        conn.close()
        
        return True, f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(tables)} —Ç–∞–±–ª–∏—Ü –¥–ª—è –±—ç–∫–∞–ø–∞"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}"

def test_notification_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        import notification_manager
        import notifications
        
        return True, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}"

def test_import_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
        import import_manager
        
        return True, "‚úÖ –ò–º–ø–æ—Ä—Ç: –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"

def test_security():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from database import get_connection
        import bcrypt
        
        # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        test_password = "test_password_123"
        hashed = bcrypt.hashpw(test_password.encode('utf-8'), bcrypt.gensalt())
        verify = bcrypt.checkpw(test_password.encode('utf-8'), hashed)
        
        if verify:
            return True, "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}"

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ JARDEM")
    print("=" * 60)
    print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", test_user_authentication),
        ("üè• CRM –°–∏—Å—Ç–µ–º–∞", test_crm_functions),
        ("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", test_analytics_functions),
        ("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", test_directories_functions),
        ("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", test_user_management),
        ("üìã –ê—É–¥–∏—Ç", test_audit_functions),
        ("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", test_backup_functions),
        ("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", test_notification_functions),
        ("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", test_import_functions),
        ("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", test_security)
    ]
    
    results = []
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            success, message = test_func()
            results.append((test_name, success, message))
            if success:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            results.append((test_name, False, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"))
            failed += 1
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    for test_name, success, message in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        print(f"  {message}")
        print()
    
    print("=" * 60)
    print(f"üìà –ò–¢–û–ì–û: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        return False

if __name__ == "__main__":
    success = run_comprehensive_test()
    sys.exit(0 if success else 1)
