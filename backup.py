import streamlit as st
import sqlite3
import pandas as pd
import zipfile
import os
from datetime import datetime, timedelta
import shutil

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å backup_manager.py
def create_backup():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    manager = BackupManager()
    return manager.create_backup()

def restore_backup(backup_path):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    manager = BackupManager()
    return manager.restore_backup(backup_path)

def list_backups():
    """–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    manager = BackupManager()
    backups = manager.get_backup_list()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    result = []
    for backup in backups:
        result.append({
            'filename': backup['filename'],
            'path': backup['path'],
            'size_mb': backup['size'] / (1024 * 1024),
            'date': backup['created'].strftime('%Y-%m-%d %H:%M:%S')
        })
    return result

def delete_backup(backup_path):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    manager = BackupManager()
    return manager.delete_backup(backup_path)

class BackupManager:
    def __init__(self, backup_dir="backups"):
        self.backup_dir = backup_dir
        self.ensure_backup_dir()
    
    def ensure_backup_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
    
    def create_backup(self, include_data=True, include_structure=True) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"medical_center_backup_{timestamp}.zip"
            backup_path = os.path.join(self.backup_dir, backup_filename)
            
            with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db_path = "medical_center.db"
                if os.path.exists(db_path):
                    zipf.write(db_path, "medical_center.db")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                config_files = ["config.py", "requirements.txt"]
                for config_file in config_files:
                    if os.path.exists(config_file):
                        zipf.write(config_file, config_file)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "backup_date": datetime.now().isoformat(),
                    "include_data": include_data,
                    "include_structure": include_structure,
                    "version": "1.0"
                }
                
                zipf.writestr("backup_metadata.txt", str(metadata))
            
            return backup_path
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
            return None
    
    def restore_backup(self, backup_path: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if not os.path.exists(backup_path):
                st.error("–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
            current_backup = self.create_backup()
            if current_backup:
                st.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã: {current_backup}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if "medical_center.db" in zipf.namelist():
                    zipf.extract("medical_center.db", ".")
                    st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    st.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                    return False
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def get_backup_list(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            backups = []
            for filename in os.listdir(self.backup_dir):
                if filename.startswith("medical_center_backup_") and filename.endswith(".zip"):
                    file_path = os.path.join(self.backup_dir, filename)
                    file_stat = os.stat(file_path)
                    backups.append({
                        "filename": filename,
                        "path": file_path,
                        "size": file_stat.st_size,
                        "created": datetime.fromtimestamp(file_stat.st_ctime)
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            backups.sort(key=lambda x: x["created"], reverse=True)
            return backups
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}")
            return []
    
    def delete_backup(self, backup_path: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        try:
            if os.path.exists(backup_path):
                os.remove(backup_path)
                return True
            return False
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
            return False
    
    def cleanup_old_backups(self, days_to_keep: int = 30) -> int:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            deleted_count = 0
            
            backups = self.get_backup_list()
            for backup in backups:
                if backup["created"] < cutoff_date:
                    if self.delete_backup(backup["path"]):
                        deleted_count += 1
            
            return deleted_count
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}")
            return 0
    
    def export_to_excel(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª"""
        try:
            db = get_database()
            df = db.get_all_patients()
            
            if df.empty:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return None
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_filename = f"medical_center_export_{timestamp}.xlsx"
            excel_path = os.path.join(self.backup_dir, excel_filename)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                df.to_excel(writer, sheet_name='–ü–∞—Ü–∏–µ–Ω—Ç—ã', index=False)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats_data = {
                    '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                        len(df),
                        df['full_name'].nunique(),
                        df['service_cost'].sum() if 'service_cost' in df.columns else 0,
                        df['service_cost'].mean() if 'service_cost' in df.columns else 0
                    ]
                }
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–∞—á–∞–º
                if 'doctor_name' in df.columns:
                    doctor_stats = df.groupby('doctor_name').agg({
                        'full_name': 'count',
                        'service_cost': ['sum', 'mean'] if 'service_cost' in df.columns else 'count'
                    }).round(2)
                    doctor_stats.columns = ['–ó–∞–ø–∏—Å–µ–π', '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] if 'service_cost' in df.columns else ['–ó–∞–ø–∏—Å–µ–π']
                    doctor_stats.to_excel(writer, sheet_name='–í—Ä–∞—á–∏')
            
            return excel_path
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {str(e)}")
            return None

def show_backup_management():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    st.subheader("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")
    
    backup_manager = BackupManager()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    st.subheader("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        include_data = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", value=True)
        include_structure = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", value=True)
    
    with col2:
        if st.button("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", type="primary"):
            with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."):
                backup_path = backup_manager.create_backup(include_data, include_structure)
                if backup_path:
                    st.success(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    st.markdown("---")
    
    # –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    st.subheader("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    
    backups = backup_manager.get_backup_list()
    
    if backups:
        for backup in backups:
            col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
            
            with col1:
                st.write(f"üìÅ {backup['filename']}")
            
            with col2:
                st.write(f"üìÖ {backup['created'].strftime('%d.%m.%Y %H:%M')}")
            
            with col3:
                size_mb = backup['size'] / (1024 * 1024)
                st.write(f"üíæ {size_mb:.2f} MB")
            
            with col4:
                if st.button("üóëÔ∏è", key=f"delete_{backup['filename']}", help="–£–¥–∞–ª–∏—Ç—å"):
                    if backup_manager.delete_backup(backup['path']):
                        st.success("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        st.subheader("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        backup_options = [f"{b['filename']} ({b['created'].strftime('%d.%m.%Y %H:%M')})" for b in backups]
        selected_backup = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", backup_options)
        
        if selected_backup and st.button("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", type="primary"):
            backup_index = backup_options.index(selected_backup)
            backup_path = backups[backup_index]['path']
            
            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (—ç—Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)"):
                with st.spinner("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ..."):
                    if backup_manager.restore_backup(backup_path):
                        st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    else:
        st.info("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    st.markdown("---")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
            with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."):
                excel_path = backup_manager.export_to_excel()
                if excel_path:
                    st.success(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {excel_path}")
                else:
                    st.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏"):
            days = st.number_input("–£–¥–∞–ª–∏—Ç—å –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—à–µ (–¥–Ω–µ–π)", value=30, min_value=1)
            if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É"):
                deleted_count = backup_manager.cleanup_old_backups(days)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_count}")
                st.rerun()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.subheader("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        auto_backup_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        backup_frequency = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞", ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"])
    
    with col2:
        backup_time = st.time_input("–í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", value=datetime.now().time())
        max_backups = st.number_input("–ú–∞–∫—Å–∏–º—É–º –∫–æ–ø–∏–π", value=10, min_value=1, max_value=100)
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
@st.cache_resource
def get_backup_manager():
    return BackupManager()
