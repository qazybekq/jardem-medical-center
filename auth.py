#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 2.0
"""

import streamlit as st
import bcrypt
from datetime import datetime, timedelta
from database import get_connection, log_audit_action

def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å rate limiting"""
    st.title("üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¶–µ–Ω—Ç—Ä - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.warning("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ù–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5) –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ - —ç—Ç–æ —Å–±—Ä–æ—Å–∏—Ç —Å–µ—Å—Å–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã.")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    if 'failed_attempts' not in st.session_state:
        st.session_state['failed_attempts'] = 0
        st.session_state['lockout_until'] = None
        st.session_state['last_attempt_time'] = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if st.session_state['lockout_until']:
        if datetime.now() < st.session_state['lockout_until']:
            remaining = (st.session_state['lockout_until'] - datetime.now()).seconds // 60
            st.error(f"üîí –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining + 1} –º–∏–Ω—É—Ç.")
            return
        else:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            st.session_state['failed_attempts'] = 0
            st.session_state['lockout_until'] = None
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ (27% —à–∏—Ä–∏–Ω—ã)
    col1, col2, col3 = st.columns([36.5, 27, 36.5])
    
    with col2:
        with st.form("login_form"):
            st.subheader("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            
            username = st.text_input("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", key="login_username")
            password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", key="login_password")
            
            col_btn1, col_btn2 = st.columns([1, 1])
            with col_btn1:
                login_button = st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True)
            with col_btn2:
                if st.form_submit_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                    st.rerun()
            
            if login_button:
                if not username or not password:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                elif authenticate_user(username, password):
                    # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    st.session_state['failed_attempts'] = 0
                    st.session_state['lockout_until'] = None
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                    st.rerun()
                else:
                    # –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    st.session_state['failed_attempts'] += 1
                    st.session_state['last_attempt_time'] = datetime.now()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                    
                    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                    if st.session_state['failed_attempts'] >= 5:
                        st.session_state['lockout_until'] = datetime.now() + timedelta(minutes=15)
                        st.error("üîí –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç.")
                    else:
                        remaining_attempts = 5 - st.session_state['failed_attempts']
                        st.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}")

def authenticate_user(username, password):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, username, password_hash, name, access_level
        FROM users
        WHERE username = ?
    ''', (username,))
    
    user = cursor.fetchone()
    conn.close()
    
    if user and user[2] and bcrypt.checkpw(password.encode('utf-8'), user[2].encode('utf-8')):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ session_state
        st.session_state['authenticated'] = True
        st.session_state['user_id'] = user[0]
        st.session_state['username'] = user[1]
        st.session_state['name'] = user[3]
        st.session_state['access_level'] = user[4]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥
        log_audit_action(user[0], 'LOGIN', 'users', user[0])
        
        return True
    
    return False

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if 'authenticated' in st.session_state and st.session_state['authenticated']:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
        log_audit_action(st.session_state.get('user_id'), 'LOGOUT', 'users', st.session_state.get('user_id'))
    
    # –û—á–∏—â–∞–µ–º session_state
    keys_to_remove = ['authenticated', 'user_id', 'username', 'name', 'access_level']
    for key in keys_to_remove:
        if key in st.session_state:
            del st.session_state[key]
    
    st.rerun()

def check_access(required_access_level):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
    if 'authenticated' not in st.session_state or not st.session_state['authenticated']:
        return False
    
    user_access_level = st.session_state.get('access_level', '')
    
    # Owner –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
    if user_access_level == 'owner':
        return True
    
    # Admin –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
    if user_access_level == 'admin':
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    if required_access_level == 'admin' and user_access_level not in ['admin', 'owner']:
        return False
    elif required_access_level == 'crm' and user_access_level not in ['admin', 'crm', 'owner']:
        return False
    
    return True

def show_user_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    if 'authenticated' in st.session_state and st.session_state['authenticated']:
        with st.sidebar:
            st.markdown("---")
            st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state['name']}")
            st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** {st.session_state['access_level']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", key="change_password_button"):
                    st.session_state['show_change_password'] = True
                    st.rerun()
            
            with col2:
                if st.button("–í—ã—Ö–æ–¥", key="logout_button_v2"):
                    logout()

def get_status_color(status):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–µ–º–∞"""
    colors = {
        '–∑–∞–ø–∏—Å–∞–Ω': '#808080',      # –°–µ—Ä–∞—è —Ä–∞–º–∫–∞
        '–Ω–∞ –ø—Ä–∏–µ–º–µ': '#FFD700',    # –ñ–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞
        '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω': '#00FF00', # –Ø—Ä–∫–æ –∑–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
        '–Ω–µ —è–≤–∏–ª—Å—è': '#FF00FF'     # –ö–∏—Å–ª–æ—Ç–Ω–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞
    }
    return colors.get(status, '#808080')

def get_status_emoji(status):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–µ–º–∞"""
    emojis = {
        '–∑–∞–ø–∏—Å–∞–Ω': 'üìÖ',
        '–Ω–∞ –ø—Ä–∏–µ–º–µ': 'üîÑ',
        '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω': '‚úÖ',
        '–Ω–µ —è–≤–∏–ª—Å—è': '‚ùå'
    }
    return emojis.get(status, 'üìÖ')
