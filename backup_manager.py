#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import streamlit as st
import os
import shutil
import sqlite3
from datetime import datetime
from database import get_connection

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    st.title("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    tab1, tab2, tab3 = st.tabs(["üì¶ –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é", "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ø–∏—è–º–∏"])
    
    with tab1:
        show_create_backup()
    
    with tab2:
        show_restore_backup()
    
    with tab3:
        show_manage_backups()

def show_create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    st.subheader("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    st.info("""
    üí° **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–∫–ª—é—á–∞–µ—Ç:**
    - –í—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∫–ª–∏–µ–Ω—Ç—ã, –≤—Ä–∞—á–∏, —É—Å–ª—É–≥–∏, –ø—Ä–∏–µ–º—ã)
    - –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        backup_description = st.text_input(
            "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
            key="backup_description"
        )
    
    with col2:
        if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", use_container_width=True):
            with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."):
                try:
                    backup_path = create_backup()
                    if backup_path:
                        st.success(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        st.code(backup_path)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        if os.path.exists(backup_path):
                            size_mb = os.path.getsize(backup_path) / (1024 * 1024)
                            st.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} –ú–ë")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.markdown("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ø–∏–∏
    backups = list_backups()
    if backups:
        latest = backups[0]
        st.subheader("üìç –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:**")
            st.write(latest['date'])
        
        with col2:
            st.write("**–†–∞–∑–º–µ—Ä:**")
            st.write(f"{latest['size_mb']:.2f} –ú–ë")
        
        with col3:
            st.write("**–§–∞–π–ª:**")
            st.write(latest['filename'])

def show_restore_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    st.subheader("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    st.warning("""
    ‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:**
    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç –í–°–ï —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    - –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    - –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ–æ–±—Ä–∞—Ç–∏–º!
    """)
    
    backups = list_backups()
    
    if not backups:
        st.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        return
    
    # –í—ã–±–æ—Ä –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    selected_backup = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:",
        options=backups,
        format_func=lambda x: f"{x['date']} ({x['size_mb']:.2f} –ú–ë) - {x['filename']}",
        key="restore_backup_select"
    )
    
    if selected_backup:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = st.checkbox(
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã",
                key="restore_confirm"
            )
        
        with col2:
            if confirm:
                if st.button("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", type="primary", use_container_width=True):
                    with st.spinner("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                        try:
                            success = restore_backup(selected_backup['path'])
                            if success:
                                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                                st.info("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_manage_backups():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")
    
    backups = list_backups()
    
    if not backups:
        st.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        return
    
    st.write(f"**–í—Å–µ–≥–æ –∫–æ–ø–∏–π:** {len(backups)}")
    
    total_size = sum(b['size_mb'] for b in backups)
    st.write(f"**–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.2f} –ú–ë")
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ø–∏–π
    for i, backup in enumerate(backups):
        with st.expander(f"üì¶ {backup['date']} - {backup['filename']}"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write("**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:**")
                st.write(backup['date'])
            
            with col2:
                st.write("**–†–∞–∑–º–µ—Ä:**")
                st.write(f"{backup['size_mb']:.2f} –ú–ë")
            
            with col3:
                st.write("**–ü—É—Ç—å:**")
                st.code(backup['path'], language=None)
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–ø–∏—é", key=f"delete_backup_{i}"):
                with st.spinner("–£–¥–∞–ª–µ–Ω–∏–µ..."):
                    try:
                        if delete_backup(backup['path']):
                            st.success("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.markdown("---")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    st.subheader("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    st.info("‚è≥ –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    # st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", disabled=True)
    # st.number_input("–°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏—é –∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π:", min_value=1, max_value=30, value=7, disabled=True)
    # st.number_input("–•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∫–æ–ø–∏–π:", min_value=1, max_value=100, value=10, disabled=True)

# ==================== –§–£–ù–ö–¶–ò–ò –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ====================

def create_backup():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        backup_dir = "backups"
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"medical_center_backup_{timestamp}.db"
        backup_path = os.path.join(backup_dir, backup_filename)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        shutil.copy2("medical_center.db", backup_path)
        
        return backup_path
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def restore_backup(backup_path):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
        current_backup = f"medical_center_backup_before_restore_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        shutil.copy2("medical_center.db", current_backup)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        shutil.copy2(backup_path, "medical_center.db")
        
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def list_backups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        backup_dir = "backups"
        if not os.path.exists(backup_dir):
            return []
        
        backups = []
        for filename in os.listdir(backup_dir):
            if filename.endswith('.db'):
                file_path = os.path.join(backup_dir, filename)
                file_stat = os.stat(file_path)
                backups.append({
                    'filename': filename,
                    'path': file_path,
                    'size': file_stat.st_size,
                    'created': datetime.fromtimestamp(file_stat.st_ctime)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        backups.sort(key=lambda x: x['created'], reverse=True)
        return backups
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ø–∏–π: {e}")
        return []

def delete_backup(backup_path):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    try:
        os.remove(backup_path)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ø–∏–∏: {e}")
        return False

if __name__ == "__main__":
    main()

