#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ v3.0
–†–µ–∞–ª–∏–∑—É–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, —É—Å–ª—É–≥ –∏ –≤—Ä–∞—á–µ–π
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
from database import get_connection, log_audit_action
from auth import check_access

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not check_access(['owner', 'admin']):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏")
        return

    st.title("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏")
    st.markdown("---")

    # –ü–æ–¥–º–µ–Ω—é –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    tab1, tab2, tab3 = st.tabs(["üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã", "üíº –£—Å–ª—É–≥–∏", "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏"])

    with tab1:
        show_clients_management()

    with tab2:
        show_services_management()

    with tab3:
        show_doctors_management()

def show_clients_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (–ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏)"""

    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", type="primary"):
        st.session_state['show_client_form'] = True
        st.session_state['edit_client_id'] = None

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if st.session_state.get('show_client_form'):
        client_id = st.session_state.get('edit_client_id')
        show_client_form(is_edit=client_id is not None, client_id=client_id)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–æ–≤
    show_clients_table()

def show_client_form(is_edit=False, client_id=None):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""

    if is_edit:
        st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    else:
        st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    client_data = None
    if is_edit and client_id:
        client_data = get_client_by_id(client_id)

    with st.form("client_form"):
        col1, col2 = st.columns(2)

        with col1:
            first_name = st.text_input(
                "–ò–º—è *",
                value=client_data[1] if client_data else "",
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            phone = st.text_input(
                "–¢–µ–ª–µ—Ñ–æ–Ω *",
                value=client_data[4] if client_data else "",
                help="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +7 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7011234567)"
            )

        with col2:
            last_name = st.text_input(
                "–§–∞–º–∏–ª–∏—è",
                value=client_data[2] if client_data else "",
                help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            birth_date = st.date_input(
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                value=datetime.strptime(client_data[3], '%Y-%m-%d').date() if client_data and client_data[3] else None,
                min_value=datetime(1910, 1, 1).date(),
                max_value=datetime(2025, 12, 31).date(),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (1910-2025)"
            )

        email = st.text_input(
            "Email",
            value=client_data[5] if client_data else "",
            help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
        )

        # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
        col1, col2, col3 = st.columns([1, 1, 2])

        with col1:
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary"):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not first_name.strip():
                    st.error("‚ùå –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                if not phone.strip():
                    st.error("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if is_edit:
                    success = update_client(client_id, first_name, last_name, birth_date, phone, email)
                else:
                    success = add_client(first_name, last_name, birth_date, phone, email)

                if success:
                    st.success("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    st.session_state['show_client_form'] = False
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")

        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state['show_client_form'] = False
                st.session_state['edit_client_id'] = None
                st.rerun()

def show_clients_table():
    """–¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

    # –ü–æ–∏—Å–∫
    search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω...")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        show_active_only = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö", value=True, key="clients_active_only")

    with col2:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        st.write("")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    clients = get_clients(search_query, show_active_only)

    if clients:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_clients = len(clients)
        active_clients = len([c for c in clients if c[6]])

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total_clients)
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", active_clients)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_data = []
        for client in clients:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if client[6] else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            display_data.append({
                "ID": client[0],
                "–ò–º—è": client[1],
                "–§–∞–º–∏–ª–∏—è": client[2] or "-",
                "–¢–µ–ª–µ—Ñ–æ–Ω": client[4],
                "Email": client[5] or "-",
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": client[3] or "-",
                "–°—Ç–∞—Ç—É—Å": status,
                "–°–æ–∑–¥–∞–Ω": client[7] if isinstance(client[7], str) else client[7].strftime("%d.%m.%Y")
            })

        df = pd.DataFrame(display_data)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "ID": st.column_config.NumberColumn("ID", format="%d"),
                "–ò–º—è": st.column_config.TextColumn("–ò–º—è"),
                "–§–∞–º–∏–ª–∏—è": st.column_config.TextColumn("–§–∞–º–∏–ª–∏—è"),
                "–¢–µ–ª–µ—Ñ–æ–Ω": st.column_config.TextColumn("–¢–µ–ª–µ—Ñ–æ–Ω"),
                "Email": st.column_config.TextColumn("Email"),
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": st.column_config.TextColumn("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"),
                "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å"),
                "–°–æ–∑–¥–∞–Ω": st.column_config.TextColumn("–°–æ–∑–¥–∞–Ω")
            }
        )

        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")

        selected_client_ids = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
            options=[c[0] for c in clients],
            format_func=lambda x: next(f"{c[1]} {c[2] or ''}".strip() for c in clients if c[0] == x)
        )

        if selected_client_ids:
            col1, col2 = st.columns(2)

            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", key="edit_clients_btn"):
                    if len(selected_client_ids) == 1:
                        st.session_state['edit_client_id'] = selected_client_ids[0]
                        st.session_state['show_client_form'] = True
                        st.rerun()
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            with col2:
                if st.button("üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", type="secondary", key="deactivate_clients_btn"):
                    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é", type="primary", key="confirm_deactivate_clients_btn"):
                        for client_id in selected_client_ids:
                            deactivate_client(client_id)
                        st.success(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(selected_client_ids)}")
                        st.rerun()
    else:
        st.info("üë§ –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def show_services_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""

    st.header("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", type="primary"):
        st.session_state['show_service_form'] = True
        st.session_state['edit_service_id'] = None

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if st.session_state.get('show_service_form'):
        service_id = st.session_state.get('edit_service_id')
        show_service_form(is_edit=service_id is not None, service_id=service_id)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —É—Å–ª—É–≥
    show_services_table()

def show_service_form(is_edit=False, service_id=None):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""

    if is_edit:
        st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
    else:
        st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    service_data = None
    if is_edit and service_id:
        service_data = get_service_by_id(service_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π
    doctors = get_active_doctors()

    with st.form("service_form"):
        col1, col2 = st.columns(2)

        with col1:
            name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ *",
                value=service_data[1] if service_data else "",
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            doctor_id = st.selectbox(
                "–í—Ä–∞—á *",
                options=[d[0] for d in doctors],
                format_func=lambda x: next(f"{d[1]} {d[2]}" for d in doctors if d[0] == x),
                index=0 if not service_data else next(i for i, d in enumerate(doctors) if d[0] == service_data[3])
            )

        with col2:
            price = st.number_input(
                "–¶–µ–Ω–∞ *",
                value=float(service_data[4]) if service_data else 0.0,
                min_value=0.0,
                step=100.0,
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            duration = st.number_input(
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω) *",
                value=service_data[5] if service_data else 30,
                min_value=5,
                max_value=480,
                step=5,
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

        description = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ",
            value=service_data[2] if service_data else "",
            help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
        )

        # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
        col1, col2, col3 = st.columns([1, 1, 2])

        with col1:
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary"):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not name.strip():
                    st.error("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                if price <= 0:
                    st.error("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
                    return

                if duration <= 0:
                    st.error("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
                    return

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if is_edit:
                    success = update_service(service_id, name, description, doctor_id, price, duration)
                else:
                    success = add_service(name, description, doctor_id, price, duration)

                if success:
                    st.success("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.session_state['show_service_form'] = False
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")

        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state['show_service_form'] = False
                st.session_state['edit_service_id'] = None
                st.rerun()

def show_services_table():
    """–¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ —Å –ø–æ–∏—Å–∫–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

    # –ü–æ–∏—Å–∫
    search_query = st.text_input("üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏...")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        selected_doctor = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É",
            options=["–í—Å–µ"] + [f"{d[1]} {d[2]}" for d in get_active_doctors()],
            index=0
        )

    with col2:
        show_active_only = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ", value=True, key="services_active_only")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    services = get_services(search_query, selected_doctor, show_active_only)

    if services:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_services = len(services)
        active_services = len([s for s in services if s[6]])

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ —É—Å–ª—É–≥", total_services)
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥", active_services)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_data = []
        for service in services:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if service[6] else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
            display_data.append({
                "ID": service[0],
                "–ù–∞–∑–≤–∞–Ω–∏–µ": service[1],
                "–û–ø–∏—Å–∞–Ω–∏–µ": service[2] or "-",
                "–í—Ä–∞—á": f"{service[7]} {service[8]}",
                "–¶–µ–Ω–∞": f"{service[4]:,.0f} ‚Ç∏",
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{service[5]} –º–∏–Ω",
                "–°—Ç–∞—Ç—É—Å": status,
                "–°–æ–∑–¥–∞–Ω–æ": service[9] if isinstance(service[9], str) else service[9].strftime("%d.%m.%Y")
            })

        df = pd.DataFrame(display_data)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "ID": st.column_config.NumberColumn("ID", format="%d"),
                "–ù–∞–∑–≤–∞–Ω–∏–µ": st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ"),
                "–û–ø–∏—Å–∞–Ω–∏–µ": st.column_config.TextColumn("–û–ø–∏—Å–∞–Ω–∏–µ"),
                "–í—Ä–∞—á": st.column_config.TextColumn("–í—Ä–∞—á"),
                "–¶–µ–Ω–∞": st.column_config.TextColumn("–¶–µ–Ω–∞"),
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": st.column_config.TextColumn("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
                "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å"),
                "–°–æ–∑–¥–∞–Ω–æ": st.column_config.TextColumn("–°–æ–∑–¥–∞–Ω–æ")
            }
        )

        # –î–µ–π—Å—Ç–≤–∏—è —Å —É—Å–ª—É–≥–∞–º–∏
        st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")

        selected_service_ids = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
            options=[s[0] for s in services],
            format_func=lambda x: next(s[1] for s in services if s[0] == x)
        )

        if selected_service_ids:
            col1, col2 = st.columns(2)

            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", key="edit_services_btn"):
                    if len(selected_service_ids) == 1:
                        st.session_state['edit_service_id'] = selected_service_ids[0]
                        st.session_state['show_service_form'] = True
                        st.rerun()
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            with col2:
                if st.button("üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", type="secondary", key="deactivate_services_btn"):
                    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é", type="primary", key="confirm_deactivate_services_btn"):
                        for service_id in selected_service_ids:
                            deactivate_service(service_id)
                        st.success(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ª—É–≥: {len(selected_service_ids)}")
                        st.rerun()
    else:
        st.info("üíº –£—Å–ª—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def show_doctors_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"""

    st.header("üë®‚Äç‚öïÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏")

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞", type="primary"):
        st.session_state['show_doctor_form'] = True
        st.session_state['edit_doctor_id'] = None

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if st.session_state.get('show_doctor_form'):
        doctor_id = st.session_state.get('edit_doctor_id')
        show_doctor_form(is_edit=doctor_id is not None, doctor_id=doctor_id)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Ä–∞—á–µ–π
    show_doctors_table()

def show_doctor_form(is_edit=False, doctor_id=None):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞"""

    if is_edit:
        st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–∞")
    else:
        st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    doctor_data = None
    if is_edit and doctor_id:
        doctor_data = get_doctor_by_id(doctor_id)

    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    specializations = [
        "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥", "–ì–∏–Ω–µ–∫–æ–ª–æ–≥", "–ü–µ–¥–∏–∞—Ç—Ä",
        "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", "–•–∏—Ä—É—Ä–≥", "–ü—Å–∏—Ö–æ–ª–æ–≥"
    ]

    with st.form("doctor_form"):
        col1, col2 = st.columns(2)

        with col1:
            first_name = st.text_input(
                "–ò–º—è *",
                value=doctor_data[1] if doctor_data else "",
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            specialization = st.selectbox(
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è *",
                options=specializations,
                index=specializations.index(doctor_data[3]) if doctor_data else 0
            )

        with col2:
            last_name = st.text_input(
                "–§–∞–º–∏–ª–∏—è *",
                value=doctor_data[2] if doctor_data else "",
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
            )

            phone = st.text_input(
                "–¢–µ–ª–µ—Ñ–æ–Ω *",
                value=doctor_data[4] if doctor_data else "",
                help="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +7 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7011234567)"
            )

        email = st.text_input(
            "Email",
            value=doctor_data[5] if doctor_data else "",
            help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
        )

        # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
        col1, col2, col3 = st.columns([1, 1, 2])

        with col1:
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary"):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not first_name.strip():
                    st.error("‚ùå –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                if not last_name.strip():
                    st.error("‚ùå –§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                if not phone.strip():
                    st.error("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    return

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if is_edit:
                    success = update_doctor(doctor_id, first_name, last_name, specialization, phone, email)
                else:
                    success = add_doctor(first_name, last_name, specialization, phone, email)

                if success:
                    st.success("‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    st.session_state['show_doctor_form'] = False
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–∞—á–∞")

        with col2:
            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state['show_doctor_form'] = False
                st.session_state['edit_doctor_id'] = None
                st.rerun()

def show_doctors_table():
    """–¢–∞–±–ª–∏—Ü–∞ –≤—Ä–∞—á–µ–π —Å –ø–æ–∏—Å–∫–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

    # –ü–æ–∏—Å–∫
    search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        selected_specialization = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
            options=["–í—Å–µ"] + [
                "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥", "–ì–∏–Ω–µ–∫–æ–ª–æ–≥", "–ü–µ–¥–∏–∞—Ç—Ä",
                "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", "–•–∏—Ä—É—Ä–≥", "–ü—Å–∏—Ö–æ–ª–æ–≥"
            ],
            index=0
        )

    with col2:
        show_active_only = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö", value=True, key="doctors_active_only")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    doctors = get_doctors(search_query, selected_specialization, show_active_only)

    if doctors:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_doctors = len(doctors)
        active_doctors = len([d for d in doctors if d[6]])

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –≤—Ä–∞—á–µ–π", total_doctors)
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π", active_doctors)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_data = []
        for doctor in doctors:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if doctor[6] else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            display_data.append({
                "ID": doctor[0],
                "–ò–º—è": doctor[1],
                "–§–∞–º–∏–ª–∏—è": doctor[2],
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": doctor[3],
                "–¢–µ–ª–µ—Ñ–æ–Ω": doctor[4],
                "Email": doctor[5] or "-",
                "–°—Ç–∞—Ç—É—Å": status,
                "–°–æ–∑–¥–∞–Ω": doctor[7] if isinstance(doctor[7], str) else doctor[7].strftime("%d.%m.%Y")
            })

        df = pd.DataFrame(display_data)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "ID": st.column_config.NumberColumn("ID", format="%d"),
                "–ò–º—è": st.column_config.TextColumn("–ò–º—è"),
                "–§–∞–º–∏–ª–∏—è": st.column_config.TextColumn("–§–∞–º–∏–ª–∏—è"),
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": st.column_config.TextColumn("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"),
                "–¢–µ–ª–µ—Ñ–æ–Ω": st.column_config.TextColumn("–¢–µ–ª–µ—Ñ–æ–Ω"),
                "Email": st.column_config.TextColumn("Email"),
                "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å"),
                "–°–æ–∑–¥–∞–Ω": st.column_config.TextColumn("–°–æ–∑–¥–∞–Ω")
            }
        )

        # –î–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–∞—á–∞–º–∏
        st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")

        selected_doctor_ids = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–µ–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
            options=[d[0] for d in doctors],
            format_func=lambda x: next(f"{d[1]} {d[2]} ({d[3]})" for d in doctors if d[0] == x)
        )

        if selected_doctor_ids:
            col1, col2 = st.columns(2)

            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", key="edit_doctors_btn"):
                    if len(selected_doctor_ids) == 1:
                        st.session_state['edit_doctor_id'] = selected_doctor_ids[0]
                        st.session_state['show_doctor_form'] = True
                        st.rerun()
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            with col2:
                if st.button("üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", type="secondary", key="deactivate_doctors_btn"):
                    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é", type="primary", key="confirm_deactivate_doctors_btn"):
                        for doctor_id in selected_doctor_ids:
                            deactivate_doctor(doctor_id)
                        st.success(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–∞—á–µ–π: {len(selected_doctor_ids)}")
                        st.rerun()
    else:
        st.info("üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞)

def get_clients(search_query=None, show_active_only=True):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    conn = get_connection()
    cursor = conn.cursor()

    query = """
        SELECT id, first_name, last_name, birth_date, phone, email, is_active, created_at
        FROM clients
        WHERE 1=1
    """

    params = []

    if search_query:
        query += " AND (first_name LIKE ? OR last_name LIKE ? OR phone LIKE ?)"
        search_pattern = f"%{search_query}%"
        params.extend([search_pattern, search_pattern, search_pattern])

    if show_active_only:
        query += " AND is_active = 1"

    query += " ORDER BY first_name, last_name"

    cursor.execute(query, params)
    clients = cursor.fetchall()
    conn.close()

    return clients

def get_client_by_id(client_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID"""
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, first_name, last_name, birth_date, phone, email, is_active, created_at
        FROM clients WHERE id = ?
    """, (client_id,))

    client = cursor.fetchone()
    conn.close()

    return client

def add_client(first_name, last_name, birth_date, phone, email):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO clients (first_name, last_name, birth_date, phone, email)
            VALUES (?, ?, ?, ?, ?)
        """, (first_name, last_name, birth_date, phone, email))

        client_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'CREATE', 'clients', client_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def update_client(client_id, first_name, last_name, birth_date, phone, email):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE clients
            SET first_name = ?, last_name = ?, birth_date = ?, phone = ?, email = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (first_name, last_name, birth_date, phone, email, client_id))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'clients', client_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def deactivate_client(client_id):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE clients SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?
        """, (client_id,))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'clients', client_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def get_active_doctors():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π"""
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, first_name, last_name FROM doctors WHERE is_active = 1 ORDER BY first_name, last_name
    """)

    doctors = cursor.fetchall()
    conn.close()

    return doctors

def get_services(search_query=None, doctor_filter="–í—Å–µ", show_active_only=True):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
    conn = get_connection()
    cursor = conn.cursor()

    query = """
        SELECT s.id, s.name, s.description, s.doctor_id, s.price, s.duration_minutes, s.is_active, s.created_at,
               d.first_name, d.last_name
        FROM services s
        JOIN doctors d ON s.doctor_id = d.id
        WHERE 1=1
    """

    params = []

    if search_query:
        query += " AND s.name LIKE ?"
        params.append(f"%{search_query}%")

    if doctor_filter != "–í—Å–µ":
        query += " AND (d.first_name || ' ' || d.last_name) = ?"
        params.append(doctor_filter)

    if show_active_only:
        query += " AND s.is_active = 1"

    query += " ORDER BY s.name"

    cursor.execute(query, params)
    services = cursor.fetchall()
    conn.close()

    return services

def get_service_by_id(service_id):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID"""
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT s.id, s.name, s.description, s.doctor_id, s.price, s.duration_minutes, s.is_active, s.created_at,
               d.first_name, d.last_name
        FROM services s
        JOIN doctors d ON s.doctor_id = d.id
        WHERE s.id = ?
    """, (service_id,))

    service = cursor.fetchone()
    conn.close()

    return service

def add_service(name, description, doctor_id, price, duration):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO services (name, description, doctor_id, price, duration_minutes)
            VALUES (?, ?, ?, ?, ?)
        """, (name, description, doctor_id, price, duration))

        service_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'CREATE', 'services', service_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        return False

def update_service(service_id, name, description, doctor_id, price, duration):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE services
            SET name = ?, description = ?, doctor_id = ?, price = ?, duration_minutes = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (name, description, doctor_id, price, duration, service_id))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'services', service_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        return False

def deactivate_service(service_id):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE services SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?
        """, (service_id,))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'services', service_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        return False

def get_doctors(search_query=None, specialization_filter="–í—Å–µ", show_active_only=True):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π"""
    conn = get_connection()
    cursor = conn.cursor()

    query = """
        SELECT id, first_name, last_name, specialization, phone, email, is_active, created_at
        FROM doctors
        WHERE 1=1
    """

    params = []

    if search_query:
        query += " AND (first_name LIKE ? OR last_name LIKE ? OR specialization LIKE ?)"
        search_pattern = f"%{search_query}%"
        params.extend([search_pattern, search_pattern, search_pattern])

    if specialization_filter != "–í—Å–µ":
        query += " AND specialization = ?"
        params.append(specialization_filter)

    if show_active_only:
        query += " AND is_active = 1"

    query += " ORDER BY first_name, last_name"

    cursor.execute(query, params)
    doctors = cursor.fetchall()
    conn.close()

    return doctors

def get_doctor_by_id(doctor_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–∞ –ø–æ ID"""
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, first_name, last_name, specialization, phone, email, is_active, created_at
        FROM doctors WHERE id = ?
    """, (doctor_id,))

    doctor = cursor.fetchone()
    conn.close()

    return doctor

def add_doctor(first_name, last_name, specialization, phone, email):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO doctors (first_name, last_name, specialization, phone, email)
            VALUES (?, ?, ?, ?, ?)
        """, (first_name, last_name, specialization, phone, email))

        doctor_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'CREATE', 'doctors', doctor_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: {e}")
        return False

def update_doctor(doctor_id, first_name, last_name, specialization, phone, email):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE doctors
            SET first_name = ?, last_name = ?, specialization = ?, phone = ?, email = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (first_name, last_name, specialization, phone, email, doctor_id))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'doctors', doctor_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: {e}")
        return False

def deactivate_doctor(doctor_id):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE doctors SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?
        """, (doctor_id,))

        conn.commit()
        conn.close()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_audit_action(st.session_state['user_id'], 'UPDATE', 'doctors', doctor_id)

        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ä–∞—á–∞: {e}")
        return False
