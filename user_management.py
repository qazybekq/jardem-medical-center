#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (owner) –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin)
"""

import streamlit as st
import secrets
import string
from database import (
    get_all_users, create_user, update_user_password, 
    update_user_access_level, delete_user, reset_user_password,
    log_audit_action
)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user_access_level = st.session_state.get('access_level', '')
    if user_access_level not in ['owner', 'admin']:
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
        "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        "üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π"
    ])
    
    with tab1:
        show_users_list()
    
    with tab2:
        show_create_user_form()
    
    with tab3:
        show_user_management()
    
    with tab4:
        show_password_reset()

def show_users_list():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã")
    
    users = get_all_users()
    
    if users:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = len(users)
        owners = len([u for u in users if u[2] == 'owner'])
        admins = len([u for u in users if u[2] == 'admin'])
        crm_users = len([u for u in users if u[2] == 'crm'])
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
        with col2:
            st.metric("üëë –í–ª–∞–¥–µ–ª—å—Ü—ã", owners)
        with col3:
            st.metric("üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", admins)
        with col4:
            st.metric("üë• CRM –º–µ–Ω–µ–¥–∂–µ—Ä—ã", crm_users)
        
        st.markdown("---")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        import pandas as pd
        
        df_data = []
        for user in users:
            df_data.append({
                "ID": user[0],
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user[1],
                "–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞": get_access_level_display(user[2]),
                "–°–æ–∑–¥–∞–Ω": user[3] if user[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥": user[4] if user[4] else "–ù–∏–∫–æ–≥–¥–∞"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
    else:
        st.info("üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_create_user_form():
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
    col_gen, col_info = st.columns([1, 2])
    with col_gen:
        if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å", key="generate_password_btn"):
            generated_password = generate_secure_password()
            st.session_state['generated_password'] = generated_password
            st.success(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {generated_password}")
    
    with col_info:
        if 'generated_password' in st.session_state:
            st.info(f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {st.session_state['generated_password']}")
    
    with st.form("create_user_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            username = st.text_input(
                "üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                help="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
            )
            
            name = st.text_input(
                "üë§ –ü–æ–ª–Ω–æ–µ –∏–º—è",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                help="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            
            access_level = st.selectbox(
                "üîê –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞",
                ["crm", "admin", "owner"],
                format_func=lambda x: get_access_level_display(x),
                help="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        
        with col2:
            password = st.text_input(
                "üîë –ü–∞—Ä–æ–ª—å",
                type="password",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                help="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
            )
            
            confirm_password = st.text_input(
                "üîë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                type="password",
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", use_container_width=True):
            if not username or not password:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            elif password != confirm_password:
                st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            elif len(password) < 8:
                st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                success, message = create_user(username, password, access_level, name)
                
                if success:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    log_audit_action(
                        st.session_state.get('user_id', 0),
                        'CREATE',
                        'user',
                        username,
                        f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {access_level}"
                    )
                    
                    st.success(f"‚úÖ {message}")
                    st.rerun()
                else:
                    st.error(f"‚ùå {message}")

def show_user_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    st.subheader("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    users = get_all_users()
    
    if not users:
        st.info("üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_options = {f"{user[1]} ({get_access_level_display(user[2])})": user[1] for user in users}
    selected_user_display = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        list(user_options.keys()),
        key="user_management_select"
    )
    
    if selected_user_display:
        selected_username = user_options[selected_user_display]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = next((u for u in users if u[1] == selected_username), None)
        
        if user_info:
            st.markdown("---")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_info[1]}")
                st.write(f"**üîê –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** {get_access_level_display(user_info[2])}")
                st.write(f"**üìÖ –°–æ–∑–¥–∞–Ω:** {user_info[3] if user_info[3] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                st.write(f"**üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {user_info[4] if user_info[4] else '–ù–∏–∫–æ–≥–¥–∞'}")
            
            with col2:
                # –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
                st.subheader("üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
                with st.form("change_password_form"):
                    new_password = st.text_input(
                        "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
                        type="password",
                        key="new_password_input"
                    )
                    confirm_new_password = st.text_input(
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
                        type="password",
                        key="confirm_new_password_input"
                    )
                    
                    if st.form_submit_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
                        if new_password and confirm_new_password:
                            if new_password == confirm_new_password:
                                if len(new_password) >= 8:
                                    success, message = update_user_password(selected_username, new_password)
                                    if success:
                                        log_audit_action(
                                            st.session_state.get('user_id', 0),
                                            'UPDATE',
                                            'user_password',
                                            selected_username,
                                            f"–ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_username}"
                                        )
                                        st.success(f"‚úÖ {message}")
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå {message}")
                                else:
                                    st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
                            else:
                                st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                        else:
                            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                
                # –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
                st.subheader("üîê –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞")
                with st.form("change_access_form"):
                    current_level = user_info[2]
                    new_access_level = st.selectbox(
                        "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞",
                        ["crm", "admin", "owner"],
                        index=["crm", "admin", "owner"].index(current_level),
                        format_func=lambda x: get_access_level_display(x),
                        key="new_access_level_select"
                    )
                    
                    if st.form_submit_button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞"):
                        if new_access_level != current_level:
                            success, message = update_user_access_level(selected_username, new_access_level)
                            if success:
                                log_audit_action(
                                    st.session_state.get('user_id', 0),
                                    'UPDATE',
                                    'user_access_level',
                                    selected_username,
                                    f"–ò–∑–º–µ–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_username} —Å {current_level} –Ω–∞ {new_access_level}"
                                )
                                st.success(f"‚úÖ {message}")
                                st.rerun()
                            else:
                                st.error(f"‚ùå {message}")
                        else:
                            st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.subheader("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="secondary", key="delete_user_btn"):
                    if st.button("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", type="primary", key="confirm_delete_btn"):
                        success, message = delete_user(selected_username)
                        if success:
                            log_audit_action(
                                st.session_state.get('user_id', 0),
                                'DELETE',
                                'user',
                                selected_username,
                                f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_username}"
                            )
                            st.success(f"‚úÖ {message}")
                            st.rerun()
                        else:
                            st.error(f"‚ùå {message}")

def show_password_reset():
    """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.subheader("üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π")
    
    users = get_all_users()
    
    if not users:
        st.info("üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    st.info("üí° –ü—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    
    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞
    user_options = {f"{user[1]} ({get_access_level_display(user[2])})": user[1] for user in users}
    selected_user_display = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
        list(user_options.keys()),
        key="password_reset_select"
    )
    
    if selected_user_display:
        selected_username = user_options[selected_user_display]
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", type="primary", key="reset_password_btn"):
                success, message = reset_user_password(selected_username)
                if success:
                    log_audit_action(
                        st.session_state.get('user_id', 0),
                        'UPDATE',
                        'user_password_reset',
                        selected_username,
                        f"–°–±—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_username}"
                    )
                    st.success(f"‚úÖ {message}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                    temp_password = message.split(": ")[-1]
                    st.warning(f"‚ö†Ô∏è **–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:** {temp_password}")
                    st.info("üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ.")
                else:
                    st.error(f"‚ùå {message}")
        
        with col2:
            if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", key="generate_new_password_btn"):
                new_password = generate_secure_password()
                success, message = update_user_password(selected_username, new_password)
                if success:
                    log_audit_action(
                        st.session_state.get('user_id', 0),
                        'UPDATE',
                        'user_password',
                        selected_username,
                        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_username}"
                    )
                    st.success(f"‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
                    st.warning(f"‚ö†Ô∏è **–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:** {new_password}")
                else:
                    st.error(f"‚ùå {message}")

def get_access_level_display(level):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
    levels = {
        'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
        'admin': 'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
        'crm': 'üë• CRM –º–µ–Ω–µ–¥–∂–µ—Ä'
    }
    return levels.get(level, level)

def generate_secure_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    characters = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(characters) for _ in range(length))

if __name__ == "__main__":
    main()
