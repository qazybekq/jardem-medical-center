#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import streamlit as st
from datetime import datetime, date, timedelta
from database import get_connection

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    st.title("üìß –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    tab1, tab2, tab3 = st.tabs(["‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –ò—Å—Ç–æ—Ä–∏—è"])
    
    with tab1:
        show_send_notification()
    
    with tab2:
        show_settings()
    
    with tab3:
        show_notification_history()

def show_send_notification():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.subheader("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    notification_type = st.radio(
        "–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        options=["Email", "SMS", "–û–±–∞"],
        key="notification_type"
    )
    
    # –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipient_type = st.radio(
        "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:",
        options=["–û–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç", "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –ø—Ä–∏–µ–º–∞–º–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫"],
        key="recipient_type"
    )
    
    recipients = []
    
    if recipient_type == "–û–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç":
        # –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        clients = get_all_clients()
        selected_client = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
            options=clients,
            format_func=lambda x: f"{x[1]} {x[2]} - {x[3]}",
            key="single_client"
        )
        if selected_client:
            recipients = [selected_client]
    
    elif recipient_type == "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –ø—Ä–∏–µ–º–∞–º–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        tomorrow = date.today() + timedelta(days=1)
        recipients = get_clients_with_appointments(tomorrow)
        st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(recipients)}")
    
    else:
        # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        manual_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            key="manual_recipients"
        )
        if manual_input:
            recipients = manual_input.strip().split('\n')
    
    st.markdown("---")
    
    # –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
    message_template = st.selectbox(
        "–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:",
        options=[
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
            "–û—Ç–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞",
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏",
            "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        ],
        key="message_template"
    )
    
    if message_template == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ":
        message = st.text_area(
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            value="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É. –ñ–¥–µ–º –≤–∞—Å!",
            height=150,
            key="message_text"
        )
    elif message_template == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        message = st.text_area(
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            height=150,
            key="custom_message"
        )
    else:
        message = st.text_area(
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            value=get_template_text(message_template),
            height=150,
            key="template_message"
        )
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col2:
        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type="primary", use_container_width=True):
            if not recipients:
                st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            elif not message:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                send_notifications(recipients, message, notification_type)

def send_notifications(recipients, message, notification_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
    success_count = 0
    fail_count = 0
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, recipient in enumerate(recipients):
        status_text.text(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {i+1} –∏–∑ {len(recipients)}...")
        
        try:
            if notification_type in ["Email", "–û–±–∞"]:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email
                email = recipient[4] if isinstance(recipient, tuple) else recipient
                if '@' in email:
                    send_email_notification(email, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞", message)
                    success_count += 1
            
            if notification_type in ["SMS", "–û–±–∞"]:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                phone = recipient[3] if isinstance(recipient, tuple) else recipient
                if phone.startswith('+'):
                    send_sms_notification(phone, message)
                    success_count += 1
        
        except Exception as e:
            fail_count += 1
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        progress_bar.progress((i + 1) / len(recipients))
    
    status_text.empty()
    progress_bar.empty()
    
    if success_count > 0:
        st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}")
    if fail_count > 0:
        st.error(f"‚ùå –û—à–∏–±–æ–∫: {fail_count}")

def show_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    st.info("üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### üìß Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    smtp_server = st.text_input("SMTP —Å–µ—Ä–≤–µ—Ä:", value="smtp.gmail.com", disabled=True)
    smtp_port = st.number_input("SMTP –ø–æ—Ä—Ç:", value=587, disabled=True)
    
    st.info("""
    –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - `SMTP_SERVER`: smtp.gmail.com
    - `SMTP_PORT`: 587
    - `SMTP_USERNAME`: your_email@gmail.com
    - `SMTP_PASSWORD`: your_password
    """)
    
    st.markdown("---")
    
    # SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### üì± SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Twilio)")
    
    st.info("""
    –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - `TWILIO_ACCOUNT_SID`: your_account_sid
    - `TWILIO_AUTH_TOKEN`: your_auth_token
    - `TWILIO_PHONE`: your_twilio_phone_number
    """)
    
    st.markdown("---")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    st.markdown("### ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–∏–µ–º–∞", value=False, disabled=True)
    st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", value=False, disabled=True)
    st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", value=False, disabled=True)
    
    st.info("‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

def show_notification_history():
    """–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.subheader("üìä –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    st.info("‚è≥ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    st.write("**–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
    st.write("- üìÖ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    st.write("- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    st.write("- ‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫")
    st.write("- üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")

def get_all_clients():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, first_name, last_name, phone, email
        FROM clients
        ORDER BY last_name, first_name
    ''')
    
    results = cursor.fetchall()
    conn.close()
    return results

def get_clients_with_appointments(appointment_date):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–µ–º–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT DISTINCT c.id, c.first_name, c.last_name, c.phone, c.email
        FROM clients c
        JOIN appointments a ON c.id = a.client_id
        WHERE a.appointment_date = ? AND a.status = '–∑–∞–ø–∏—Å–∞–Ω'
        ORDER BY c.last_name, c.first_name
    ''', (appointment_date,))
    
    results = cursor.fetchall()
    conn.close()
    return results

def get_template_text(template_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"""
    templates = {
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ñ–¥–µ–º –≤–∞—Å!",
        "–û—Ç–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞": "–£–≤–∞–∂–∞–µ–º—ã–π –ø–∞—Ü–∏–µ–Ω—Ç, –≤–∞—à –ø—Ä–∏–µ–º –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏": "–£–≤–∞–∂–∞–µ–º—ã–π –ø–∞—Ü–∏–µ–Ω—Ç, –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–æ. –ù–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
    }
    return templates.get(template_name, "")

# ==================== –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

def send_email_notification(email, subject, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        st.info(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}: {subject}")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

def send_sms_notification(phone, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        st.info(f"üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}: {message}")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
        return False

if __name__ == "__main__":
    main()

