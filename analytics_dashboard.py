#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ v2.2
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from database import get_connection

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è" –¥–ª—è CRM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if st.session_state.get('analytics_today_only', False):
        st.info("üìÖ –î–æ—Å—Ç—É–ø–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
        st.session_state['quick_filter_start'] = date.today()
        st.session_state['quick_filter_end'] = date.today()
        st.session_state['active_quick_filter'] = "today"
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
    st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    active_filter = st.session_state.get('active_quick_filter', None)
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üìÖ –°–µ–≥–æ–¥–Ω—è", use_container_width=True, type="primary" if active_filter == "today" else "secondary"):
            st.session_state['quick_filter_start'] = date.today()
            st.session_state['quick_filter_end'] = date.today()
            st.session_state['active_quick_filter'] = "today"
            st.rerun()
    
    with col2:
        if st.button("üìÜ –ù–µ–¥–µ–ª—è", use_container_width=True, type="primary" if active_filter == "week" else "secondary"):
            st.session_state['quick_filter_start'] = date.today() - timedelta(days=7)
            st.session_state['quick_filter_end'] = date.today()
            st.session_state['active_quick_filter'] = "week"
            st.rerun()
    
    with col3:
        if st.button("üóìÔ∏è –ú–µ—Å—è—Ü", use_container_width=True, type="primary" if active_filter == "month" else "secondary"):
            st.session_state['quick_filter_start'] = date.today() - timedelta(days=30)
            st.session_state['quick_filter_end'] = date.today()
            st.session_state['active_quick_filter'] = "month"
            st.rerun()
    
    with col4:
        if st.button("üìä –ö–≤–∞—Ä—Ç–∞–ª", use_container_width=True, type="primary" if active_filter == "quarter" else "secondary"):
            st.session_state['quick_filter_start'] = date.today() - timedelta(days=90)
            st.session_state['quick_filter_end'] = date.today()
            st.session_state['active_quick_filter'] = "quarter"
            st.rerun()
    
    with col5:
        if st.button("üìà –ì–æ–¥", use_container_width=True, type="primary" if active_filter == "year" else "secondary"):
            st.session_state['quick_filter_start'] = date.today() - timedelta(days=365)
            st.session_state['quick_filter_end'] = date.today()
            st.session_state['active_quick_filter'] = "year"
            st.rerun()
    
    st.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä—ã
    with st.sidebar:
        st.header("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        # –ü–µ—Ä–∏–æ–¥ (—Å —É—á—ë—Ç–æ–º –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        default_start = st.session_state.get('quick_filter_start', date.today() - timedelta(days=30))
        default_end = st.session_state.get('quick_filter_end', date.today())
        
        date_range = st.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            value=(default_start, default_end),
            key="analytics_date_range"
        )
        
        # –í—Ä–∞—á–∏
        doctors = get_all_doctors_for_filter()
        selected_doctors = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–µ–π:",
            options=[d[0] for d in doctors],
            default=[d[0] for d in doctors],
            format_func=lambda x: next((f"{d[1]} {d[2]}" for d in doctors if d[0] == x), x),
            key="analytics_doctors"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if len(date_range) == 2:
        start_date, end_date = date_range
        df = get_analytics_data(start_date, end_date, selected_doctors)
        
        if df.empty:
            st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –≤—Ä–∞—á–µ–π")
            return
        
        # KPI –º–µ—Ç—Ä–∏–∫–∏
        show_kpi_metrics(df)
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            show_appointments_by_status(df)
            show_appointments_by_doctor(df)
        
        with col2:
            show_revenue_by_doctor(df)
            show_appointments_timeline(df)
        
        st.markdown("---")
        
        # –ù–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ v2.7
        col3, col4 = st.columns(2)
        
        with col3:
            show_patient_sources(df)
        
        with col4:
            show_payment_methods(df)
        
        st.markdown("---")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        show_detailed_table(df)
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

@st.cache_data(ttl=300)  # –ö–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
def get_all_doctors_for_filter():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, first_name, last_name
        FROM doctors
        WHERE is_active = 1
        ORDER BY last_name, first_name
    ''')
    
    results = cursor.fetchall()
    conn.close()
    return results

@st.cache_data(ttl=60)  # –ö–µ—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
def get_analytics_data(start_date, end_date, doctor_ids):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    conn = get_connection()
    
    query = '''
        SELECT 
            a.id as appointment_id,
            a.appointment_date,
            a.appointment_time,
            a.status,
            a.actual_duration_minutes,
            c.first_name || ' ' || c.last_name as client_name,
            d.first_name || ' ' || d.last_name as doctor_name,
            d.specialization,
            s.name as service_name,
            s.price as service_price,
            (SELECT COALESCE(SUM(price), 0) FROM appointment_services WHERE appointment_id = a.id) as total_cost,
            a.source,
            (SELECT GROUP_CONCAT(DISTINCT asp.payment_method, ', ') 
             FROM appointment_services aps 
             LEFT JOIN appointment_service_payments asp ON aps.id = asp.appointment_service_id 
             WHERE aps.appointment_id = a.id) as payment_methods
        FROM appointments a
        JOIN clients c ON a.client_id = c.id
        JOIN doctors d ON a.doctor_id = d.id
        JOIN services s ON a.service_id = s.id
        WHERE a.appointment_date BETWEEN ? AND ?
    '''
    
    params = [start_date, end_date]
    
    if doctor_ids:
        placeholders = ','.join(['?' for _ in doctor_ids])
        query += f' AND a.doctor_id IN ({placeholders})'
        params.extend(doctor_ids)
    
    query += ' ORDER BY a.appointment_date, a.appointment_time'
    
    df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    
    return df

def show_kpi_metrics(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å KPI –º–µ—Ç—Ä–∏–∫–∏ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–æ–≤"""
    st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if 'analytics_date_range' in st.session_state:
        current_start = st.session_state['analytics_date_range'][0]
        current_end = st.session_state['analytics_date_range'][1]
        period_length = (current_end - current_start).days
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        previous_end = current_start - timedelta(days=1)
        previous_start = previous_end - timedelta(days=period_length)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        df_previous = get_analytics_data(previous_start, previous_end, 
                                        st.session_state.get('analytics_doctors', []))
    else:
        df_previous = pd.DataFrame()
    
    col1, col2, col3, col4 = st.columns(4)
    
    # –í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤
    with col1:
        total_appointments = len(df)
        if not df_previous.empty:
            prev_appointments = len(df_previous)
            delta_appointments = total_appointments - prev_appointments
            delta_pct = (delta_appointments / prev_appointments * 100) if prev_appointments > 0 else 0
            st.metric("–í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤", total_appointments, 
                     delta=f"{delta_pct:+.1f}%", 
                     delta_color="normal")
        else:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤", total_appointments)
    
    # –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
    with col2:
        total_revenue = df['total_cost'].sum()
        if not df_previous.empty:
            prev_revenue = df_previous['total_cost'].sum()
            delta_revenue = total_revenue - prev_revenue
            delta_pct = (delta_revenue / prev_revenue * 100) if prev_revenue > 0 else 0
            st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚Ç∏", 
                     delta=f"{delta_pct:+.1f}%",
                     delta_color="normal")
        else:
            st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚Ç∏")
    
    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    with col3:
        avg_check = df['total_cost'].mean()
        if not df_previous.empty:
            prev_avg_check = df_previous['total_cost'].mean()
            delta_check = avg_check - prev_avg_check
            delta_pct = (delta_check / prev_avg_check * 100) if prev_avg_check > 0 else 0
            st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_check:,.0f} ‚Ç∏", 
                     delta=f"{delta_pct:+.1f}%",
                     delta_color="normal")
        else:
            st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_check:,.0f} ‚Ç∏")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã
    with col4:
        total_appointments = len(df)
        completed = len(df[df['status'] == '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω'])
        completion_rate = (completed / total_appointments * 100) if total_appointments > 0 else 0
        
        if not df_previous.empty:
            prev_total = len(df_previous)
            prev_completed = len(df_previous[df_previous['status'] == '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω'])
            prev_completion_rate = (prev_completed / prev_total * 100) if prev_total > 0 else 0
            delta_rate = completion_rate - prev_completion_rate
            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", f"{completed} ({completion_rate:.1f}%)", 
                     delta=f"{delta_rate:+.1f}%",
                     delta_color="normal")
        else:
            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", f"{completed} ({completion_rate:.1f}%)")

def show_appointments_by_status(df):
    """–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
    st.subheader("üìä –ü—Ä–∏–µ–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
    
    status_counts = df['status'].value_counts()
    
    fig = px.pie(
        values=status_counts.values,
        names=status_counts.index,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
        color_discrete_map={
            '–∑–∞–ø–∏—Å–∞–Ω': '#808080',
            '–Ω–∞ –ø—Ä–∏–µ–º–µ': '#FFD700',
            '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω': '#00FF00',
            '–Ω–µ —è–≤–∏–ª—Å—è': '#FF00FF'
        }
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_appointments_by_doctor(df):
    """–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–æ –≤—Ä–∞—á–∞–º"""
    st.subheader("üë®‚Äç‚öïÔ∏è –ü—Ä–∏–µ–º—ã –ø–æ –≤—Ä–∞—á–∞–º")
    
    doctor_counts = df['doctor_name'].value_counts()
    
    fig = px.bar(
        x=doctor_counts.values,
        y=doctor_counts.index,
        orientation='h',
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤",
        labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'y': '–í—Ä–∞—á'}
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_revenue_by_doctor(df):
    """–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –ø–æ –≤—Ä–∞—á–∞–º"""
    st.subheader("üí∞ –í—ã—Ä—É—á–∫–∞ –ø–æ –≤—Ä–∞—á–∞–º")
    
    revenue_by_doctor = df.groupby('doctor_name')['total_cost'].sum().sort_values(ascending=True)
    
    fig = px.bar(
        x=revenue_by_doctor.values,
        y=revenue_by_doctor.index,
        orientation='h',
        title="–í—ã—Ä—É—á–∫–∞ (KZT)",
        labels={'x': '–í—ã—Ä—É—á–∫–∞', 'y': '–í—Ä–∞—á'}
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_appointments_timeline(df):
    """–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–∏–µ–º–æ–≤"""
    st.subheader("üìÖ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–µ–º–æ–≤")
    
    df['appointment_date'] = pd.to_datetime(df['appointment_date'])
    timeline = df.groupby('appointment_date').size().reset_index(name='count')
    
    fig = px.line(
        timeline,
        x='appointment_date',
        y='count',
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–æ –¥–Ω—è–º",
        labels={'appointment_date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_detailed_table(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = df[[
        'appointment_date', 'appointment_time', 'client_name',
        'doctor_name', 'service_name', 'total_cost', 'status', 'source', 'payment_methods'
    ]].copy()
    
    display_df.columns = [
        '–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–ü–∞—Ü–∏–µ–Ω—Ç', '–í—Ä–∞—á', '–£—Å–ª—É–≥–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã'
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    display_df = display_df.sort_values('–î–∞—Ç–∞', ascending=False)
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(display_df)}")
    
    with col2:
        total = display_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
        st.info(f"**–û–±—â–∞—è —Å—É–º–º–∞:** {total:,.0f} KZT")
    
    with col3:
        avg = display_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].mean()
        st.info(f"**–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {avg:,.0f} KZT")

def show_patient_sources(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (v2.7)"""
    st.subheader("üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    
    if 'source' not in df.columns or df['source'].isna().all():
        st.info("üìä –î–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    source_counts = df['source'].value_counts().reset_index()
    source_counts.columns = ['–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.pie(
        source_counts,
        values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        names='–ò—Å—Ç–æ—á–Ω–∏–∫',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
        hole=0.4,  # –î–µ–ª–∞–µ–º donut chart
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hovertemplate='<b>%{label}</b><br>–ü—Ä–∏–µ–º–æ–≤: %{value}<br>–î–æ–ª—è: %{percent}<extra></extra>'
    )
    
    fig.update_layout(
        showlegend=True,
        height=400,
        margin=dict(t=50, b=20, l=20, r=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    st.markdown("**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –≤—ã—Ä—É—á–∫—É
    source_stats = df.groupby('source').agg({
        'appointment_id': 'count',
        'total_cost': 'sum'
    }).reset_index()
    
    source_stats.columns = ['–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤', '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞']
    source_stats['–ü—Ä–æ—Ü–µ–Ω—Ç'] = (source_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤'] / source_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤'].sum() * 100).round(1)
    source_stats['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] = (source_stats['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'] / source_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤']).round(0)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–µ–º–æ–≤
    source_stats = source_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤', ascending=False)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
    source_stats['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'] = source_stats['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    source_stats['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] = source_stats['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    source_stats['–ü—Ä–æ—Ü–µ–Ω—Ç'] = source_stats['–ü—Ä–æ—Ü–µ–Ω—Ç'].apply(lambda x: f"{x}%")
    
    st.dataframe(
        source_stats,
        use_container_width=True,
        hide_index=True
    )
    
    # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    if not source_stats.empty:
        top_source = source_stats.iloc[0]['–ò—Å—Ç–æ—á–Ω–∏–∫']
        top_count = source_stats.iloc[0]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤']
        st.success(f"üèÜ **–õ—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫:** {top_source} ({top_count} –ø—Ä–∏–µ–º–æ–≤)")

def show_payment_methods(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã (v2.7)"""
    st.subheader("üí≥ –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–ª–∞—Ç–∞–º –∏–∑ –ë–î
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–µ–º–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    appointment_ids = tuple(df['appointment_id'].unique().tolist())
    
    if not appointment_ids:
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º")
        return
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç
    placeholders = ','.join(['?' for _ in appointment_ids])
    query = f'''
        SELECT 
            asp.payment_method,
            SUM(asp.amount) as total_amount,
            COUNT(DISTINCT asrv.appointment_id) as appointment_count
        FROM appointment_service_payments asp
        JOIN appointment_services asrv ON asp.appointment_service_id = asrv.id
        WHERE asrv.appointment_id IN ({placeholders})
        GROUP BY asp.payment_method
        ORDER BY total_amount DESC
    '''
    
    cursor.execute(query, appointment_ids)
    payment_data = cursor.fetchall()
    conn.close()
    
    if not payment_data:
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    payment_df = pd.DataFrame(payment_data, columns=['–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã', '–°—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤'])
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    fig = px.pie(
        payment_df,
        values='–°—É–º–º–∞',
        names='–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç –ø–æ –º–µ—Ç–æ–¥–∞–º',
        hole=0.4,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hovertemplate='<b>%{label}</b><br>–°—É–º–º–∞: %{value:,.0f} ‚Ç∏<br>–î–æ–ª—è: %{percent}<extra></extra>'
    )
    
    fig.update_layout(
        showlegend=True,
        height=400,
        margin=dict(t=50, b=20, l=20, r=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    st.markdown("**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    payment_df['–ü—Ä–æ—Ü–µ–Ω—Ç'] = (payment_df['–°—É–º–º–∞'] / payment_df['–°—É–º–º–∞'].sum() * 100).round(1)
    payment_df['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] = (payment_df['–°—É–º–º–∞'] / payment_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤']).round(0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    display_df = payment_df.copy()
    display_df['–°—É–º–º–∞'] = display_df['–°—É–º–º–∞'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    display_df['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] = display_df['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'].apply(lambda x: f"{x:,.0f} ‚Ç∏")
    display_df['–ü—Ä–æ—Ü–µ–Ω—Ç'] = display_df['–ü—Ä–æ—Ü–µ–Ω—Ç'].apply(lambda x: f"{x}%")
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    method_icons = {
        "–ö–∞—Ä—Ç–∞": "üí≥",
        "–ù–∞–ª–∏—á–Ω—ã–µ": "üíµ",
        "Kaspi QR": "üì±",
        "–ü–µ—Ä–µ–≤–æ–¥": "üí∏"
    }
    
    display_df['–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã'] = display_df['–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã'].apply(
        lambda x: f"{method_icons.get(x, 'üí∞')} {x}"
    )
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True
    )
    
    # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    if not payment_df.empty:
        top_method = payment_data[0][0]
        top_amount = payment_data[0][1]
        top_icon = method_icons.get(top_method, 'üí∞')
        st.success(f"{top_icon} **–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥:** {top_method} ({top_amount:,.0f} ‚Ç∏)")

if __name__ == "__main__":
    main()

