#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
1000 –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
"""

import random
from datetime import datetime, date, time, timedelta
from database import (
    get_connection, create_client, create_appointment, 
    get_all_doctors, get_all_services, add_service_to_appointment,
    update_appointment_status
)

# –ö–∞–∑–∞—Ö—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏
FIRST_NAMES_MALE = [
    '–ê—Å—Ö–∞—Ç', '–î–∞–Ω–∏—è—Ä', '–ï—Ä–ª–∞–Ω', '–ú–∞—Ä–∞—Ç', '–ù—É—Ä–ª–∞–Ω', '–û–ª–∂–∞—Å', '–†—É—Å—Ç–µ–º', '–°–µ—Ä–∏–∫',
    '–¢–∞–ª–≥–∞—Ç', '–ê–π–¥–∞—Ä', '–ë–µ–∫–∑–∞—Ç', '–ï—Ä–∂–∞–Ω', '–ñ–∞–Ω–∏–±–µ–∫', '–ö–∞–π—Ä–∞—Ç', '–ú—É—Ä–∞—Ç', '–°–∞–Ω–∂–∞—Ä',
    '–¢–∏–º—É—Ä', '–®—ã–Ω–≥—ã—Å', '–ê–ª–º–∞—Å', '–ë–∞—Ç—ã—Ä', '–ì–∞–ª—ã–º–∂–∞–Ω', '–î—É–ª–∞—Ç', '–ï—Å–µ–Ω', '–ñ–µ–Ω–∏—Å'
]

FIRST_NAMES_FEMALE = [
    '–ê–π–≥—É–ª—å', '–ê–π–∂–∞–Ω', '–ê–π—à–∞', '–ì—É–ª—å–Ω–∞—Ä–∞', '–î–∏–Ω–∞—Ä–∞', '–ñ–∞–Ω–∞—Ä', '–ñ–∞–Ω–Ω–∞', '–ó–∞—Ä–∏–Ω–∞',
    '–ö–∞–º–∏–ª–∞', '–õ–∞—É—Ä–∞', '–ú–∞–¥–∏–Ω–∞', '–ù–∞–∑–∏—Ä–∞', '–°–∞—É–ª–µ', '–¢–æ–ª–≥–∞–Ω–∞–π', '–ê–ª–∏—è', '–ë–∞–ª–∂–∞–Ω',
    '–ì—É–ª—å–º–∏—Ä–∞', '–î–∞—Ä–∏–≥–∞', '–ï–ª–µ–Ω–∞', '–ñ–∞–Ω—Å–∞—è', '–ò–Ω–¥–∏—Ä–∞', '–ö—É—Ä–∞–ª–∞–π', '–õ—è–∑–∑–∞—Ç', '–ú–µ—Ä—É–µ—Ä—Ç'
]

LAST_NAMES = [
    '–ù—É—Ä–ª–∞–Ω–æ–≤', '–ê—Ö–º–µ—Ç–æ–≤', '–ö–∞–ª–∏–µ–≤', '–°–µ—Ä–∏–∫–æ–≤', '–¢—É–ª–µ—É–æ–≤', '–ò–±—Ä–∞–≥–∏–º–æ–≤', '–°–µ–π—Ç–∂–∞–Ω–æ–≤',
    '–ö—É–∞–Ω–æ–≤', '–ñ—É–º–∞–±–∞–µ–≤', '–û—Å–ø–∞–Ω–æ–≤', '–ö–∞—Å—ã–º–æ–≤', '–ë–∞–π–±–æ—Å—ã–Ω–æ–≤', '–ê–ª–∏–±–µ–∫–æ–≤', '–ú—É—Ö–∞–º–±–µ—Ç–æ–≤',
    '–ê–±–¥—É–ª–ª–∞–µ–≤', '–ï—Å–µ–Ω–æ–≤', '–ë–µ–∫–µ–Ω–æ–≤', '–¢–æ–∫–∞–µ–≤', '–°–º–∞–≥—É–ª–æ–≤', '–ñ–∞–∫—É–ø–æ–≤', '–ê—Å–∞–Ω–æ–≤',
    '–°–∞–¥—ã–∫–æ–≤', '–¢—É—Ä—Å—É–Ω–æ–≤', '–ú–∞–º–±–µ—Ç–æ–≤', '–†–∞—Ö–∏–º–æ–≤', '–°–∞–±–∏—Ä–æ–≤', '–¢–µ–º–∏—Ä–æ–≤', '–£–º–∞—Ä–æ–≤'
]

def generate_phone():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return f"+7 {random.randint(700, 799)} {random.randint(100, 999)} {random.randint(1000, 9999)}"

def generate_email(first_name, last_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è email"""
    domains = ['gmail.com', 'mail.ru', 'yandex.kz', 'inbox.ru', 'bk.ru']
    name = first_name.lower()
    surname = last_name.lower()
    patterns = [
        f"{name}.{surname}@{random.choice(domains)}",
        f"{name}{random.randint(1, 99)}@{random.choice(domains)}",
        f"{surname}.{name}@{random.choice(domains)}",
        f"{name}_{surname}@{random.choice(domains)}"
    ]
    return random.choice(patterns)

def generate_birth_date():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (18-80 –ª–µ—Ç)"""
    years_ago = random.randint(18, 80)
    today = date.today()
    birth_year = today.year - years_ago
    birth_month = random.randint(1, 12)
    birth_day = random.randint(1, 28)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
    return date(birth_year, birth_month, birth_day)

def generate_appointment_datetime(start_date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç start_date
    days_ago = random.randint(0, 180)
    appointment_date = start_date - timedelta(days=days_ago)
    
    # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00 - 18:00, —Å —à–∞–≥–æ–º 15 –º–∏–Ω—É—Ç
    hour = random.randint(9, 17)
    minute = random.choice([0, 15, 30, 45])
    appointment_time = time(hour, minute, 0)
    
    return appointment_date, appointment_time

def generate_status(appointment_date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–µ–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã"""
    today = date.today()
    
    if appointment_date > today:
        # –ë—É–¥—É—â–∏–µ –ø—Ä–∏–µ–º—ã - —Ç–æ–ª—å–∫–æ "–∑–∞–ø–∏—Å–∞–Ω"
        return '–∑–∞–ø–∏—Å–∞–Ω'
    elif appointment_date == today:
        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ - –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ
        return random.choices(
            ['–∑–∞–ø–∏—Å–∞–Ω', '–Ω–∞ –ø—Ä–∏–µ–º–µ', '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω', '–Ω–µ —è–≤–∏–ª—Å—è'],
            weights=[40, 30, 20, 10]
        )[0]
    else:
        # –ü—Ä–æ—à–ª—ã–µ –ø—Ä–∏–µ–º—ã
        return random.choices(
            ['–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω', '–Ω–µ —è–≤–∏–ª—Å—è'],
            weights=[85, 15]
        )[0]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–∞—á–µ–π –∏ —É—Å–ª—É–≥–∏
    doctors = get_all_doctors()
    all_services = get_all_services()
    
    if not doctors or not all_services:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—Ä–∞—á–µ–π –∏–ª–∏ —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(doctors)} –≤—Ä–∞—á–µ–π")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_services)} —É—Å–ª—É–≥")
    print()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (300 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
    print("üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    clients = []
    used_phones = set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ –ë–î
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT phone FROM clients')
    existing_phones = {row[0] for row in cursor.fetchall()}
    conn.close()
    used_phones.update(existing_phones)
    
    created_count = 0
    attempts = 0
    max_attempts = 500
    
    while created_count < 300 and attempts < max_attempts:
        attempts += 1
        
        # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        gender = random.choice(['male', 'female'])
        
        if gender == 'male':
            first_name = random.choice(FIRST_NAMES_MALE)
        else:
            first_name = random.choice(FIRST_NAMES_FEMALE)
        
        last_name = random.choice(LAST_NAMES)
        if gender == 'female' and not last_name.endswith('–∞'):
            last_name += '–∞'  # –ñ–µ–Ω—Å–∫–∞—è —Ñ–æ—Ä–º–∞ —Ñ–∞–º–∏–ª–∏–∏
        
        birth_date = generate_birth_date()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        phone = generate_phone()
        retries = 0
        while phone in used_phones and retries < 50:
            phone = generate_phone()
            retries += 1
        
        if phone in used_phones:
            continue
            
        used_phones.add(phone)
        
        email = generate_email(first_name, last_name) if random.random() > 0.2 else None
        
        client_id = create_client(first_name, last_name, birth_date, phone, email)
        
        if client_id:
            clients.append(client_id)
            created_count += 1
            if created_count % 50 == 0:
                print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ {created_count} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
    print()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–æ–≤ (1000 –∑–∞–ø–∏—Å–µ–π)
    print("üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–æ–≤...")
    
    today = date.today()
    appointments_created = 0
    appointments_failed = 0
    
    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ (30% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç 2-5 —Ä–∞–∑)
    repeat_clients = random.sample(clients, int(len(clients) * 0.3))
    repeat_counts = {client_id: random.randint(2, 5) for client_id in repeat_clients}
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–µ–º—ã
    target_appointments = 1000
    appointments_to_create = []
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    for client_id, count in repeat_counts.items():
        for _ in range(count):
            appointments_to_create.append(client_id)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏–µ–º—É)
    remaining = target_appointments - len(appointments_to_create)
    single_visit_clients = [c for c in clients if c not in repeat_clients]
    appointments_to_create.extend(random.choices(single_visit_clients, k=remaining))
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    random.shuffle(appointments_to_create)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º—ã
    for i, client_id in enumerate(appointments_to_create):
        appointment_date, appointment_time = generate_appointment_datetime(today)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        doctor = random.choice(doctors)
        doctor_id = doctor[0]
        
        # –í—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥–∏ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞
        doctor_services = [s for s in all_services if s[5] == doctor[1] and s[6] == doctor[2]]
        
        if not doctor_services:
            # –ï—Å–ª–∏ —É –≤—Ä–∞—á–∞ –Ω–µ—Ç —É—Å–ª—É–≥, –±–µ—Ä–µ–º –ª—é–±—É—é
            service = random.choice(all_services)
        else:
            service = random.choice(doctor_services)
        
        service_id = service[0]
        service_price = service[3]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ (–∏–Ω–æ–≥–¥–∞)
        notes = None
        if random.random() < 0.3:
            notes_options = [
                "–ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º",
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–∏–µ–º",
                "–ñ–∞–ª–æ–±—ã –Ω–∞ –±–æ–ª–∏",
                "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–æ–≤",
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞"
            ]
            notes = random.choice(notes_options)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º (—Ç–µ–ø–µ—Ä—å service_id –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ create_appointment)
        try:
            appointment_id = create_appointment(
                client_id, doctor_id, service_id,
                appointment_date, appointment_time, notes,
                skip_date_validation=True  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            )
            
            if not appointment_id:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if appointments_failed < 5:
                    print(f"  ‚ö†Ô∏è –ü—Ä–∏–µ–º #{i+1} –Ω–µ —Å–æ–∑–¥–∞–Ω: client={client_id}, doctor={doctor_id}, service={service_id}, date={appointment_date}, time={appointment_time}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ #{i+1}: {e}")
            appointment_id = None
        
        if appointment_id:
            appointments_created += 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = generate_status(appointment_date)
            
            # –ï—Å–ª–∏ –ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if status == '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω':
                start_time = datetime.combine(appointment_date, appointment_time)
                duration = random.randint(15, 60)  # 15-60 –º–∏–Ω—É—Ç
                end_time = start_time + timedelta(minutes=duration)
                
                update_appointment_status(
                    appointment_id, status,
                    start_time.isoformat(),
                    end_time.isoformat()
                )
            elif status in ['–Ω–∞ –ø—Ä–∏–µ–º–µ', '–Ω–µ —è–≤–∏–ª—Å—è']:
                update_appointment_status(appointment_id, status)
            
            # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (15% –ø—Ä–∏–µ–º–æ–≤)
            if random.random() < 0.15:
                additional_services = random.sample(
                    [s for s in all_services if s[0] != service_id],
                    random.randint(1, 2)
                )
                for add_service in additional_services:
                    add_service_to_appointment(
                        appointment_id,
                        add_service[0],
                        add_service[3]
                    )
            
            if (i + 1) % 100 == 0:
                print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ {i + 1} –ø—Ä–∏–µ–º–æ–≤...")
        else:
            appointments_failed += 1
    
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤: {appointments_created}")
    if appointments_failed > 0:
        print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {appointments_failed}")
    
    print()
    print("=" * 60)
    print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print()
    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
    print(f"  ‚Ä¢ –ü—Ä–∏–µ–º–æ–≤: {appointments_created}")
    print(f"  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(repeat_clients)}")
    print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç {today}")
    print()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()

