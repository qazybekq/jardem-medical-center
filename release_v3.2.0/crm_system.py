#!/usr/bin/env python3
"""
CRM —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–∏ 2.0 —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, time, timedelta
import hashlib
from database import (
    get_connection, search_clients, create_client, get_client_by_id,
    get_all_doctors, get_services_by_doctor, get_all_services, create_appointment,
    get_appointment_by_id, update_appointment_status, get_appointments_by_date_range,
    delete_appointment, log_audit_action,
    add_service_to_appointment, remove_service_from_appointment,
    get_appointment_services, get_total_appointment_cost,
    add_payment_to_service, get_appointment_payments_summary, update_appointment_payment_status
)
from auth import get_status_color, get_status_emoji

def get_doctor_color(doctor_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ø–†–ö–û–ì–û –∏ –ó–ê–ú–ï–¢–ù–û–ì–û —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—Ä–∞—á–∞"""
    hash_object = hashlib.md5(doctor_name.encode())
    hex_dig = hash_object.hexdigest()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB
    r = int(hex_dig[0:2], 16)
    g = int(hex_dig[2:4], 16)
    b = int(hex_dig[4:6], 16)
    
    # –î–µ–ª–∞–µ–º –ù–ê–°–´–©–ï–ù–ù–´–ú –Ω–æ –°–í–ï–¢–õ–´–ú (—Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ)
    # –§–æ—Ä–º—É–ª–∞: (color + 255) / 2 –¥–ª—è —è—Ä–∫–∏—Ö –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–Ω–æ–≤
    r = int((r + 255) / 2)
    g = int((g + 255) / 2)
    b = int((b + 255) / 2)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å: –æ—Ç–æ–¥–≤–∏–≥–∞–µ–º –æ—Ç —Å–µ—Ä–æ–≥–æ
    avg = (r + g + b) / 3
    r = int(r + (r - avg) * 0.3)
    g = int(g + (g - avg) * 0.3)
    b = int(b + (b - avg) * 0.3)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    r = max(100, min(255, r))  # –Ω–µ —Ç–µ–º–Ω–µ–µ 100, –Ω–µ —Å–≤–µ—Ç–ª–µ–µ 255
    g = max(100, min(255, g))
    b = max(100, min(255, b))
    
    return f"#{r:02x}{g:02x}{b:02x}"

def get_initials(full_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–∫ '–ò. –§–∞–º–∏–ª–∏—è'"""
    parts = full_name.split()
    if len(parts) >= 2:
        return f"{parts[0][0].upper()}. {parts[1]}"
    return full_name

def show_appointment_form(appointment_id=None, selected_date=None, selected_time=None, selected_doctor_id=None):
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞"""
    st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–∞" if not appointment_id else "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∞ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    appointment_data = None
    if appointment_id:
        appointment_data = get_appointment_by_id(appointment_id)
        if not appointment_data:
            st.error("‚ùå –ü—Ä–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
        if appointment_data:
            client_query = f"{appointment_data[10]} {appointment_data[11]}"
            selected_client_id = appointment_data[1]
            st.info(f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment_data[10]} {appointment_data[11]} ({appointment_data[12]})")
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT id, first_name, last_name, phone FROM clients ORDER BY last_name, first_name')
            all_clients = cursor.fetchall()
            conn.close()
            
            client_options = ["-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å --"] + [
                f"{client[1]} {client[2]} ({client[3]})" for client in all_clients
            ]
            client_ids = {f"{client[1]} {client[2]} ({client[3]})": client[0] for client in all_clients}
            
            # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–∏—Å–∫–æ–º
            selected_client_option = st.selectbox(
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
                options=client_options,
                key="client_select_dropdown",
                help="–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"
            )
            
            if selected_client_option != "-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å --":
                selected_client_id = client_ids[selected_client_option]
                st.session_state['selected_client_id'] = selected_client_id
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                client_data = get_client_by_id(selected_client_id)
                if client_data:
                    st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω: {client_data[1]} {client_data[2]} ({client_data[4]})")
            else:
                selected_client_id = st.session_state.get('selected_client_id')
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if not selected_client_id and not appointment_data:
            st.markdown("**–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:**")
            with st.form("create_client_form"):
                new_first_name = st.text_input("–ò–º—è:", key="new_first_name")
                new_last_name = st.text_input("–§–∞–º–∏–ª–∏—è:", key="new_last_name")
                new_birth_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", key="new_birth_date")
                new_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω:", key="new_phone")
                new_email = st.text_input("Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", key="new_email")
                
                if st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", use_container_width=True):
                    if new_first_name and new_last_name and new_phone:
                        client_id = create_client(new_first_name, new_last_name, new_birth_date, new_phone, new_email)
                        if client_id:
                            st.success("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!")
                            st.session_state['selected_client_id'] = client_id
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                    else:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
    with col2:
        # –í—ã–±–æ—Ä –≤—Ä–∞—á–∞
        doctors = get_all_doctors()
        doctor_options = {f"{doc[1]} {doc[2]}": doc[0] for doc in doctors}
        
        if appointment_data:
            selected_doctor_name = f"{appointment_data[13]} {appointment_data[14]}"
            selected_doctor_id = appointment_data[2]
        else:
            selected_doctor_name = st.selectbox(
                "üë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:",
                options=list(doctor_options.keys()),
                key="doctor_select"
            )
            selected_doctor_id = doctor_options.get(selected_doctor_name)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state['selected_doctor_id'] = selected_doctor_id
        
        # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
        if selected_doctor_id:
            services = get_services_by_doctor(selected_doctor_id)
            service_options = {f"{srv[1]} ({srv[3]} KZT)": srv[0] for srv in services}
            
            if appointment_data:
                selected_service_name = appointment_data[16]
                selected_service_id = appointment_data[3]
            else:
                if services:
                    selected_service_name = st.selectbox(
                        "üè• –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                        options=list(service_options.keys()),
                        key="service_select"
                    )
                    selected_service_id = service_options.get(selected_service_name)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                    st.session_state['selected_service_id'] = selected_service_id
                else:
                    st.warning("–£ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥")
                    selected_service_id = None
    
    # –§–æ—Ä–º–∞ –ø—Ä–∏–µ–º–∞
    with st.form("appointment_form"):
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        col3, col4 = st.columns(2)
        with col3:
            if appointment_data:
                appointment_date = datetime.strptime(appointment_data[4], '%Y-%m-%d').date()
            else:
                appointment_date = st.date_input(
                    "üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞:",
                    value=selected_date or date.today(),
                    key="appointment_date"
                )
        
        with col4:
            if appointment_data:
                appointment_time = datetime.strptime(appointment_data[5], '%H:%M:%S').time()
            else:
                appointment_time = st.time_input(
                    "üïê –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:",
                    value=selected_time or time(9, 0),
                    key="appointment_time"
                )
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–µ–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if appointment_data:
            status_options = ['–∑–∞–ø–∏—Å–∞–Ω', '–Ω–∞ –ø—Ä–∏–µ–º–µ', '–ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω', '–Ω–µ —è–≤–∏–ª—Å—è']
            current_status = appointment_data[6]
            new_status = st.selectbox(
                "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–µ–º–∞:",
                options=status_options,
                index=status_options.index(current_status),
                key="appointment_status"
            )
        
        # –ó–∞–º–µ—Ç–∫–∏
        notes = st.text_area(
            "üìù –ó–∞–º–µ—Ç–∫–∏:",
            value=appointment_data[7] if appointment_data else "",
            key="appointment_notes"
        )
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ v2.7)
        source_options = [
            "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ–∫–ª–∞–º–∞",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            "2–ì–ò–°",
            "Instagram",
            "Facebook",
            "–î—Ä—É–≥–æ–µ"
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if appointment_data and len(appointment_data) > 17:
            current_source = appointment_data[17] if appointment_data[17] else "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ"
        else:
            current_source = "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ"
        
        source = st.selectbox(
            "üåê –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:",
            options=source_options,
            index=source_options.index(current_source) if current_source in source_options else 0,
            key="appointment_source",
            help="–ò—Å—Ç–æ—á–Ω–∏–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç —É–∑–Ω–∞–ª –æ –∫–ª–∏–Ω–∏–∫–µ"
        )
        
        # –ö–Ω–æ–ø–∫–∏
        if appointment_id:
            # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
            col5, col6, col7 = st.columns(3)
        else:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è - –¥–≤–µ –∫–Ω–æ–ø–∫–∏
            col5, col6 = st.columns(2)
            col7 = None
        
        with col5:
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                if 'saving_appointment' not in st.session_state:
                    st.session_state['saving_appointment'] = False
                
                if st.session_state['saving_appointment']:
                    st.warning("‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                    return
                
                st.session_state['saving_appointment'] = True
                
                if appointment_id:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞
                    update_appointment_status(appointment_id, new_status)
                    st.success("‚úÖ –ü—Ä–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    log_audit_action(st.session_state['user_id'], 'UPDATE', 'appointments', appointment_id)
                    st.session_state['saving_appointment'] = False
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state
                    client_id_to_use = selected_client_id or st.session_state.get('selected_client_id')
                    doctor_id_to_use = selected_doctor_id or st.session_state.get('selected_doctor_id')
                    service_id_to_use = selected_service_id or st.session_state.get('selected_service_id')
                    
                    if client_id_to_use and doctor_id_to_use and service_id_to_use:
                        new_appointment_id = create_appointment(
                            client_id_to_use, doctor_id_to_use, service_id_to_use,
                            appointment_date, appointment_time, notes, source
                        )
                        if new_appointment_id:
                            st.success("‚úÖ –ü—Ä–∏–µ–º —Å–æ–∑–¥–∞–Ω!")
                            log_audit_action(st.session_state['user_id'], 'CREATE', 'appointments', new_appointment_id)
                            
                            # –û—á–∏—â–∞–µ–º session_state
                            for key in ['selected_client_id', 'selected_doctor_id', 'selected_service_id',
                                       'new_appointment_date', 'new_appointment_time', 'edit_appointment_id', 'saving_appointment']:
                                if key in st.session_state:
                                    del st.session_state[key]
                            
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞")
                            st.session_state['saving_appointment'] = False
                    else:
                        missing = []
                        if not client_id_to_use:
                            missing.append("–∫–ª–∏–µ–Ω—Ç–∞")
                        if not doctor_id_to_use:
                            missing.append("–≤—Ä–∞—á–∞")
                        if not service_id_to_use:
                            missing.append("—É—Å–ª—É–≥—É")
                        st.error(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: {', '.join(missing)}")
                
                # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if appointment_id:
                    for key in ['selected_client_id', 'selected_doctor_id', 'selected_service_id',
                               'new_appointment_date', 'new_appointment_time', 'edit_appointment_id']:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.rerun()
        
            with col6:
                if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ session_state
                    for key in ['selected_client_id', 'selected_doctor_id', 'selected_service_id',
                               'new_appointment_date', 'new_appointment_time', 'edit_appointment_id', 'saving_appointment']:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if col7:
            with col7:
                if st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", use_container_width=True, type="secondary"):
                    st.session_state['confirm_delete_appointment'] = appointment_id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
    if 'confirm_delete_appointment' in st.session_state:
        delete_id = st.session_state['confirm_delete_appointment']
        st.warning(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–µ–º?")
        
        col_confirm1, col_confirm2, col_confirm3 = st.columns(3)
        with col_confirm1:
            if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", key="confirm_delete_yes", use_container_width=True):
                if delete_appointment(delete_id):
                    st.success("‚úÖ –ü—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    log_audit_action(st.session_state['user_id'], 'DELETE', 'appointments', delete_id)
                    
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
                    for key in ['selected_client_id', 'selected_doctor_id', 'selected_service_id',
                               'new_appointment_date', 'new_appointment_time', 'edit_appointment_id',
                               'confirm_delete_appointment']:
                        if key in st.session_state:
                            del st.session_state[key]
                    
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–µ–º–∞")
        
        with col_confirm2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key="confirm_delete_no", use_container_width=True):
                del st.session_state['confirm_delete_appointment']
                st.rerun()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    if appointment_id:
        st.markdown("---")
        st.subheader("üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É—Å–ª—É–≥–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ü–µ–Ω–æ–π (v2.7)
        current_services = get_appointment_services(appointment_id)
        if current_services:
            st.write("**–¢–µ–∫—É—â–∏–µ —É—Å–ª—É–≥–∏:**")
            
            for service in current_services:
                appointment_service_id = service[0]
                service_id = service[1]
                service_name = service[2]
                service_description = service[3]
                actual_price = service[4]  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ (–∏–∑ appointment_services)
                base_price = service[5]  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (–∏–∑ services)
                duration = service[6]
                doctor_name = f"{service[7]} {service[8]}"
                
                with st.form(f"service_edit_form_{appointment_service_id}"):
                    col_srv1, col_srv2, col_srv3, col_srv4, col_srv5 = st.columns([2, 2, 1.5, 1, 1])
                    
                    with col_srv1:
                        st.write(f"üìã {service_name}")
                    with col_srv2:
                        st.write(f"üë®‚Äç‚öïÔ∏è {doctor_name}")
                    with col_srv3:
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
                        new_price = st.number_input(
                            "–¶–µ–Ω–∞ (‚Ç∏)",
                            value=float(actual_price),
                            min_value=0.0,
                            step=100.0,
                            key=f"price_{appointment_service_id}",
                            help=f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} ‚Ç∏",
                            label_visibility="collapsed"
                        )
                    with col_srv4:
                        if st.form_submit_button("üíæ", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É"):
                            if new_price != actual_price:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
                                conn = get_connection()
                                cursor = conn.cursor()
                                cursor.execute('''
                                    UPDATE appointment_services 
                                    SET price = ? 
                                    WHERE id = ?
                                ''', (new_price, appointment_service_id))
                                conn.commit()
                                conn.close()
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                                log_audit_action(
                                    st.session_state['user_id'], 
                                    'UPDATE', 
                                    'appointment_services', 
                                    appointment_service_id,
                                    old_values={'price': actual_price},
                                    new_values={'price': new_price}
                                )
                                
                                st.success(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {actual_price} ‚Üí {new_price} ‚Ç∏")
                                st.rerun()
                    with col_srv5:
                        if st.form_submit_button("üóëÔ∏è", help="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É"):
                            if remove_service_from_appointment(appointment_id, appointment_service_id):
                                st.success("‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞")
                                log_audit_action(st.session_state['user_id'], 'DELETE', 'appointment_services', appointment_service_id)
                                st.rerun()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = get_total_appointment_cost(appointment_id)
            st.info(f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost} KZT")
        else:
            st.info("–£—Å–ª—É–≥–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        st.markdown("**–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É:**")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
        all_services = get_all_services()
        if all_services:
            service_options = {
                f"{srv[1]} - {srv[5]} {srv[6]} ({srv[3]} KZT)": (srv[0], srv[3]) 
                for srv in all_services
            }
            
            selected_new_service = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                options=["-- –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É --"] + list(service_options.keys()),
                key="add_service_select"
            )
            
            if selected_new_service != "-- –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É --":
                service_id_to_add, service_price = service_options[selected_new_service]
                
                col_add1, col_add2 = st.columns([1, 3])
                with col_add1:
                    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", use_container_width=True):
                        if add_service_to_appointment(appointment_id, service_id_to_add, service_price):
                            st.success("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                            log_audit_action(st.session_state['user_id'], 'CREATE', 'appointment_services', appointment_id)
                            st.rerun()
                        else:
                            st.error("‚ùå –£—Å–ª—É–≥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
        else:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥")
    
    # –°–µ–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã (v2.7) - –í–´–ù–ï–°–ï–ù–ê –ò–ó –ë–õ–û–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–õ–£–ì–ê–ú–ò
    if appointment_id:
        current_services = get_appointment_services(appointment_id)
        
        st.markdown("---")
        st.subheader("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–æ–π")
        
        if current_services:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = get_total_appointment_cost(appointment_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –æ–ø–ª–∞—Ç–∞–º
            payments_summary = get_appointment_payments_summary(appointment_id)
            total_paid = sum([p[1] for p in payments_summary]) if payments_summary else 0.0
            remaining = total_cost - total_paid
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            col_pay1, col_pay2, col_pay3 = st.columns(3)
            
            with col_pay1:
                st.metric("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_cost:,.0f} ‚Ç∏")
            with col_pay2:
                st.metric("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", f"{total_paid:,.0f} ‚Ç∏")
            with col_pay3:
                delta_color = "normal" if remaining == 0 else ("inverse" if remaining > 0 else "off")
                st.metric("üìä –û—Å—Ç–∞—Ç–æ–∫", f"{remaining:,.0f} ‚Ç∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç
            if payments_summary:
                st.markdown("**–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:**")
                for payment in payments_summary:
                    method_icon = {
                        "–ö–∞—Ä—Ç–∞": "üí≥",
                        "–ù–∞–ª–∏—á–Ω—ã–µ": "üíµ",
                        "QR-–∫–æ–¥": "üì±",
                        "–ü–µ—Ä–µ–≤–æ–¥": "üí∏"
                    }.get(payment[0], "üí∞")
                    st.write(f"{method_icon} **{payment[0]}:** {payment[1]:,.0f} ‚Ç∏")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            if remaining > 0:
                st.markdown("**–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É:**")
                
                with st.form("add_payment_form"):
                    col_pm1, col_pm2 = st.columns([2, 2])
                    
                    with col_pm1:
                        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
                        payment_methods = st.multiselect(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:",
                            ["–ö–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–µ", "QR-–∫–æ–¥", "–ü–µ—Ä–µ–≤–æ–¥"],
                            default=["–ö–∞—Ä—Ç–∞"],
                            key="payment_methods_select"
                        )
                    
                    with col_pm2:
                        st.write("") # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                    
                    # –°—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
                    payment_amounts = {}
                    total_payment_input = 0.0
                    
                    if payment_methods:
                        st.markdown("**–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—ã:**")
                        
                        cols = st.columns(len(payment_methods))
                        for idx, method in enumerate(payment_methods):
                            with cols[idx]:
                                method_icon = {
                                    "–ö–∞—Ä—Ç–∞": "üí≥",
                                    "–ù–∞–ª–∏—á–Ω—ã–µ": "üíµ",
                                    "QR-–∫–æ–¥": "üì±",
                                    "–ü–µ—Ä–µ–≤–æ–¥": "üí∏"
                                }.get(method, "üí∞")
                                
                                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É–º–º—É
                                default_amount = remaining if len(payment_methods) == 1 else 0.0
                                
                                amount = st.number_input(
                                    f"{method_icon} {method}:",
                                    min_value=0.0,
                                    max_value=float(remaining),
                                    value=float(default_amount),
                                    step=100.0,
                                    key=f"payment_amount_{method}"
                                )
                                payment_amounts[method] = amount
                                total_payment_input += amount
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏ –æ—Å—Ç–∞—Ç–æ–∫
                        col_sum1, col_sum2, col_sum3 = st.columns(3)
                        with col_sum1:
                            st.info(f"**–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:** {total_payment_input:,.0f} ‚Ç∏")
                        with col_sum2:
                            if total_payment_input < remaining:
                                st.warning(f"**–û—Å—Ç–∞–ª–æ—Å—å:** {remaining - total_payment_input:,.0f} ‚Ç∏")
                            elif total_payment_input == remaining:
                                st.success("‚úÖ **–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞**")
                            else:
                                st.error(f"‚ö†Ô∏è **–ü–µ—Ä–µ–ø–ª–∞—Ç–∞:** {total_payment_input - remaining:,.0f} ‚Ç∏")
                    else:
                        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–í–°–ï–ì–î–ê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ!)
                    if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", use_container_width=True):
                        if not payment_methods:
                            st.error("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")
                        elif total_payment_input > remaining:
                            st.error("‚ùå –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫!")
                        elif total_payment_input == 0:
                            st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã")
                        else:
                            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º
                            success = True
                            payments_created = 0
                            
                            for service in current_services:
                                appointment_service_id = service[0]  # ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã appointment_services
                                service_price = service[4]  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏
                                service_proportion = service_price / total_cost
                                
                                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                                for method, total_method_amount in payment_amounts.items():
                                    if total_method_amount > 0:
                                        service_payment_amount = total_method_amount * service_proportion
                                        
                                        payment_id = add_payment_to_service(appointment_service_id, method, service_payment_amount)
                                        if payment_id:
                                            payments_created += 1
                                        else:
                                            success = False
                                            break
                                
                                if not success:
                                    break
                            
                            if success and payments_created > 0:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–µ–º–∞
                                new_total_paid = total_paid + total_payment_input
                                
                                if update_appointment_payment_status(appointment_id, new_total_paid, total_cost):
                                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                                    log_audit_action(st.session_state['user_id'], 'CREATE', 'appointment_service_payments', appointment_id)
                                    
                                    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º appointment_id –ø–µ—Ä–µ–¥ rerun
                                    # —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                    st.session_state['edit_appointment_id'] = appointment_id
                                    
                                    # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    st.success(f"‚úÖ –û–ø–ª–∞—Ç–∞ {total_payment_input:,.0f} ‚Ç∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_total_paid:,.0f} ‚Ç∏ –∏–∑ {total_cost:,.0f} ‚Ç∏")
                                    
                                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")
            else:
                if remaining == 0:
                    st.success("‚úÖ –ü—Ä–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω!")
                else:
                    st.info("üíµ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            st.info("–î–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–æ–π")

def show_calendar_view():
    """–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏"""
    st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–µ–º–æ–≤")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
    col1, col2, col3, col4, col5 = st.columns([1.5, 1.5, 1, 1, 1.5])
    
    with col1:
        if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", key="prev_week_v2"):
            if 'current_week_offset' not in st.session_state:
                st.session_state['current_week_offset'] = 0
            st.session_state['current_week_offset'] -= 1
            st.rerun()
    
    with col2:
        if st.button("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", key="next_week_v2"):
            if 'current_week_offset' not in st.session_state:
                st.session_state['current_week_offset'] = 0
            st.session_state['current_week_offset'] += 1
            st.rerun()
    
    with col3:
        if st.button("üìÖ –°–µ–≥–æ–¥–Ω—è", key="today_view_v2"):
            st.session_state['current_week_offset'] = 0
            st.session_state['view_mode'] = 'today'
            st.rerun()
    
    with col4:
        if st.button("üìÜ –ù–µ–¥–µ–ª—è", key="week_view_v2"):
            st.session_state['view_mode'] = 'week'
            st.rerun()
    
    with col5:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º", key="add_appointment_v2", type="primary"):
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞
            st.session_state['new_appointment_date'] = date.today()
            st.session_state['new_appointment_time'] = time(9, 0)
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Å–º–µ—â–µ–Ω–∏–µ
    today = date.today()
    current_week_offset = st.session_state.get('current_week_offset', 0)
    view_mode = st.session_state.get('view_mode', 'week')
    
    # –§–∏–ª—å—Ç—Ä –≤—Ä–∞—á–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    col_filter1, col_filter2 = st.columns([3, 1])
    
    with col_filter1:
        doctors = get_all_doctors()
        doctor_options = {f"{doc[1]} {doc[2]}": doc[0] for doc in doctors}
        
        selected_doctors = st.multiselect(
            "üë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–µ–π:",
            options=list(doctor_options.keys()),
            default=list(doctor_options.keys()),
            key="doctor_filter_v2"
        )
    
    with col_filter2:
        st.markdown("<br>", unsafe_allow_html=True)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        color_coding_enabled = st.checkbox(
            "üé® –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            value=False,
            key="color_coding_toggle",
            help="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤—Ä–∞—á–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"
        )
    
    selected_doctor_ids = [doctor_options[doc] for doc in selected_doctors]
    
    # –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤ –≤—Ä–∞—á–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–∞—á–µ–π)
    if color_coding_enabled and len(selected_doctors) > 1:
        # –î–æ–±–∞–≤–ª—è–µ–º expander –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤—Ä–∞—á–µ–π (6+)
        if len(selected_doctors) > 5:
            with st.expander("üé® –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤ –≤—Ä–∞—á–µ–π", expanded=True):
                legend_cols = st.columns(min(len(selected_doctors), 4))
                
                for idx, doctor_name in enumerate(selected_doctors):
                    col_idx = idx % 4
                    with legend_cols[col_idx]:
                        doctor_color = get_doctor_color(doctor_name)
                        st.markdown(f"""
                        <div style="
                            display: inline-block;
                            background-color: {doctor_color};
                            padding: 5px 10px;
                            border-radius: 4px;
                            margin: 2px;
                            font-size: 12px;
                            border: 1px solid #ccc;
                        ">
                            {doctor_name}
                        </div>
                        """, unsafe_allow_html=True)
        else:
            st.markdown("**üé® –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤:**")
            legend_cols = st.columns(min(len(selected_doctors), 4))
            
            for idx, doctor_name in enumerate(selected_doctors):
                col_idx = idx % 4
                with legend_cols[col_idx]:
                    doctor_color = get_doctor_color(doctor_name)
                    st.markdown(f"""
                    <div style="
                        display: inline-block;
                        background-color: {doctor_color};
                        padding: 5px 10px;
                        border-radius: 4px;
                        margin: 2px;
                        font-size: 12px;
                        border: 1px solid #ccc;
                    ">
                        {doctor_name}
                    </div>
                    """, unsafe_allow_html=True)
        
        st.markdown("---")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if view_mode == 'today':
        start_date = today
        end_date = today
        st.subheader(f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {today.strftime('%d.%m.%Y')}")
    else:
        week_start = today + timedelta(days=-today.weekday() + (current_week_offset * 7))
        start_date = week_start
        end_date = week_start + timedelta(days=6)
        st.subheader(f"üìÖ –ù–µ–¥–µ–ª—è —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–µ–º—ã
    appointments = get_appointments_by_date_range(start_date, end_date)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–∞—á–∞–º
    if selected_doctor_ids:
        appointments = [apt for apt in appointments if apt[2] in selected_doctor_ids]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–µ–º–æ–≤ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    appointments_dict = {}
    for apt in appointments:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç date
        if isinstance(apt[4], str):
            apt_date = datetime.strptime(apt[4], '%Y-%m-%d').date()
        else:
            apt_date = apt[4]
        
        apt_time = apt[5]
        
        if apt_date not in appointments_dict:
            appointments_dict[apt_date] = {}
        
        # –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if apt_time not in appointments_dict[apt_date]:
            appointments_dict[apt_date][apt_time] = []
        
        appointments_dict[apt_date][apt_time].append(apt)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
    time_slots = []
    for hour in range(9, 18):
        for minute in [0, 15, 30, 45]:
            time_slots.append(time(hour, minute))
    
    if view_mode == 'today':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è
        show_day_appointments(today, appointments_dict, time_slots, color_coding_enabled)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª—é
        show_week_appointments(start_date, appointments_dict, time_slots, today, color_coding_enabled)

def show_day_appointments(day, appointments_dict, time_slots, color_coding_enabled=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å"""
    st.markdown("---")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
    day_name = day.strftime('%A')
    day_names = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    st.markdown(f"### {day_names.get(day_name, day_name)} {day.strftime('%d.%m.%Y')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    for time_slot in time_slots:
        time_str = time_slot.strftime('%H:%M')
        
        # –ò—â–µ–º –ø—Ä–∏–µ–º—ã –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
        day_appointments = appointments_dict.get(day, {})
        slot_appointments = []
        
        for apt_time, appointment_list in day_appointments.items():
            apt_time_obj = datetime.strptime(apt_time, '%H:%M:%S').time()
            if apt_time_obj == time_slot:
                # appointment_list —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤
                slot_appointments.extend(appointment_list)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É
        if slot_appointments:
            # –ï—Å—Ç—å –ø—Ä–∏–µ–º—ã
            if len(slot_appointments) == 1:
                # –û–¥–∏–Ω –ø—Ä–∏–µ–º
                appointment = slot_appointments[0]
                status = appointment[6]
                status_color = get_status_color(status)
                status_emoji = get_status_emoji(status)
                
                client_name = get_initials(f"{appointment[10]} {appointment[11]}")
                doctor_name = get_initials(f"{appointment[13]} {appointment[14]}")
                doctor_full_name = f"{appointment[13]} {appointment[14]}"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                if color_coding_enabled:
                    doctor_bg_color = get_doctor_color(doctor_full_name)
                else:
                    doctor_bg_color = "#f0f0f0"  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —è—á–µ–π–∫–∏
                cell_key = f"day_apt_{appointment[0]}_{time_slot.strftime('%H%M')}"
                
                # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —è—á–µ–π–∫–∏
                client_short = client_name if len(client_name) <= 15 else client_name[:13] + "."
                doctor_short = doctor_name if len(doctor_name) <= 15 else doctor_name[:13] + "."
                button_text = f"{status_emoji} {time_str}\nüë§ {client_short}\nüë®‚Äç‚öïÔ∏è {doctor_short}"
                full_text = f"{time_str} | {client_name} ‚Üí {doctor_name}"
                
                # –†–ï–®–ï–ù–ò–ï: –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
                with st.form(key=f"form_{cell_key}"):
                    # HTML –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                    card_html = f"""
                    <div style="
                        background-color: {doctor_bg_color};
                        border: 3px solid {status_color};
                        border-radius: 8px;
                        padding: 6px 5px;
                        margin: 2px 0px;
                        min-height: 78px;
                        max-height: 78px;
                        height: 78px;
                        box-sizing: border-box;
                        overflow: hidden;
                        display: flex;
                        flex-direction: column;
                        align-items: flex-start;
                        justify-content: flex-start;
                        font-size: 11px;
                        line-height: 1.2;
                        color: #000000;
                        white-space: pre-line;
                        transition: transform 0.1s;
                    " title="{full_text}">
                        <div style="font-weight: 600;">{status_emoji} {time_str}</div>
                        <div style="margin-top: 2px;">üë§ {client_short}</div>
                        <div style="opacity: 0.85;">üë®‚Äç‚öïÔ∏è {doctor_short}</div>
                    </div>
                    """
                    
                    st.markdown(card_html, unsafe_allow_html=True)
                    
                    # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    edit_btn_key = f"edit_btn_day_{appointment[0]}"
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    st.markdown("""
                        <style>
                        /* –ú–∞–ª–µ–Ω—å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ */
                        div[data-testid="column"] button[type="submit"] {
                            font-size: 8px !important;
                            padding: 1px 3px !important;
                            height: 16px !important;
                            min-height: 16px !important;
                            max-height: 16px !important;
                            line-height: 1 !important;
                            width: auto !important;
                            min-width: 24px !important;
                        }
                        </style>
                    """, unsafe_allow_html=True)
                    
                    if st.form_submit_button("‚úèÔ∏è", type="secondary", key=edit_btn_key):
                        st.session_state['edit_appointment_id'] = appointment[0]
                        st.rerun()
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–æ–≤
                appointments_info = f"üìã {len(slot_appointments)} –ø—Ä–∏–µ–º–∞ –≤ {time_str}:\n"
                for apt in slot_appointments:
                    client = get_initials(f"{apt[10]} {apt[11]}")
                    doctor = get_initials(f"{apt[13]} {apt[14]}")
                    appointments_info += f"‚Ä¢ {client} ‚Üí {doctor}\n"
                
                # –ö–Ω–æ–ø–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–µ–º–∞–º–∏
                if st.button(
                    appointments_info.strip(),
                    key=f"day_multi_{time_slot}",
                    help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞",
                    use_container_width=True
                ):
                    st.session_state['multi_appointment_slot'] = {
                        'date': day,
                        'time': time_slot,
                        'appointments': slot_appointments
                    }
                    st.rerun()
        else:
            # –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç - —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π "+"
            empty_card_html = f"""
            <div style="
                min-height: 78px;
                height: 78px;
                width: 100%;
                box-sizing: border-box;
                margin: 2px;
                padding: 6px 5px;
                border: 2px dashed #ddd;
                background-color: #f9f9f9;
                border-radius: 8px;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                text-align: center;
                color: #999;
                font-size: 11px;
            ">
                <div style="font-size: 20px; color: #ccc;">+</div>
                <div style="font-size: 10px; margin-top: 4px;">{time_str}</div>
            </div>
            """
            st.markdown(empty_card_html, unsafe_allow_html=True)

def show_week_appointments(start_date, appointments_dict, time_slots, today, color_coding_enabled=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    st.markdown("---")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏: –∫–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ + –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    cols = st.columns([0.7, 1, 1, 1, 1, 1, 1, 1])  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    with cols[0]:
        st.markdown("""
        <div style="
            padding: 8px;
            text-align: center;
            font-weight: bold;
            font-size: 12px;
        ">
            –í—Ä–µ–º—è
        </div>
        """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    for i, col in enumerate(cols[1:], start=0):
        current_day = start_date + timedelta(days=i)
        is_today = current_day == today
        
        with col:
            if is_today:
                # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                st.markdown(f"""
                <div style="
                    background-color: #FFD700;
                    border: 2px solid #FFA500;
                    padding: 8px;
                    border-radius: 8px;
                    text-align: center;
                    font-weight: bold;
                ">
                    {day_names[i]}<br>{current_day.strftime('%d.%m')}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="
                    padding: 8px;
                    text-align: center;
                ">
                    {day_names[i]}<br>{current_day.strftime('%d.%m')}
                </div>
                """, unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    for time_slot in time_slots:
        time_str = time_slot.strftime('%H:%M')
        cols = st.columns([0.7, 1, 1, 1, 1, 1, 1, 1])
        
        # –ö–æ–ª–æ–Ω–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        with cols[0]:
            st.markdown(f"""
            <div style="
                padding: 8px;
                text-align: center;
                font-weight: bold;
                font-size: 12px;
                color: #555;
                background-color: #f0f0f0;
                border-radius: 4px;
            ">
                {time_str}
            </div>
            """, unsafe_allow_html=True)
        
        # –ö–æ–ª–æ–Ω–∫–∏ —Å –¥–Ω—è–º–∏
        for i, col in enumerate(cols[1:], start=0):
            current_day = start_date + timedelta(days=i)
            day_appointments = appointments_dict.get(current_day, {})
            
            with col:
                # –ò—â–µ–º –ø—Ä–∏–µ–º—ã –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
                slot_appointments = []
                for apt_time, appointment_list in day_appointments.items():
                    apt_time_obj = datetime.strptime(apt_time, '%H:%M:%S').time()
                    if apt_time_obj == time_slot:
                        # appointment_list —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤
                        slot_appointments.extend(appointment_list)
                
                if slot_appointments:
                    # –ï—Å—Ç—å –ø—Ä–∏–µ–º—ã - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
                    if len(slot_appointments) == 1:
                        # –û–¥–∏–Ω –ø—Ä–∏–µ–º
                        appointment = slot_appointments[0]
                        status = appointment[6]
                        status_color = get_status_color(status)
                        status_emoji = get_status_emoji(status)
                        
                        client_name = get_initials(f"{appointment[10]} {appointment[11]}")
                        doctor_name = get_initials(f"{appointment[13]} {appointment[14]}")
                        doctor_full_name = f"{appointment[13]} {appointment[14]}"
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        if color_coding_enabled:
                            doctor_bg_color = get_doctor_color(doctor_full_name)
                            # DEBUG: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ü–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
                            # st.write(f"DEBUG: {doctor_full_name} ‚Üí {doctor_bg_color}")
                        else:
                            doctor_bg_color = "#f0f0f0"  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —è—á–µ–π–∫–∏
                        cell_key = f"week_apt_{appointment[0]}_{current_day.strftime('%Y%m%d')}_{time_slot.strftime('%H%M')}"
                        
                        # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —è—á–µ–π–∫–∏
                        client_short = client_name if len(client_name) <= 12 else client_name[:10] + "."
                        doctor_short = doctor_name if len(doctor_name) <= 12 else doctor_name[:10] + "."
                        button_text = f"{status_emoji}\n{client_short}\n{doctor_short}"
                        full_text = f"{status_emoji} {client_name} ‚Üí {doctor_name}"
                        
                        # –†–ï–®–ï–ù–ò–ï: –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (bypass Streamlit –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
                        with st.form(key=f"form_{cell_key}"):
                            # HTML –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                            card_html = f"""
                            <div style="
                                background-color: {doctor_bg_color};
                                border: 2px solid {status_color};
                                border-radius: 6px;
                                padding: 4px 3px;
                                margin: 1px 0px;
                                min-height: 65px;
                                max-height: 65px;
                                height: 65px;
                                box-sizing: border-box;
                                overflow: hidden;
                                display: flex;
                                flex-direction: column;
                                align-items: center;
                                justify-content: center;
                                font-size: 9px;
                                line-height: 1.1;
                                color: #000000;
                                text-align: center;
                                white-space: pre-line;
                                transition: transform 0.1s;
                            " title="{full_text}">
                                <div>{status_emoji}</div>
                                <div style="font-weight: 500;">{client_short}</div>
                                <div style="opacity: 0.8;">{doctor_short}</div>
                            </div>
                            """
                            
                            st.markdown(card_html, unsafe_allow_html=True)
                            
                            # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            edit_btn_key_week = f"edit_btn_week_{appointment[0]}"
                            
                            if st.form_submit_button("‚úèÔ∏è", type="secondary", key=edit_btn_key_week):
                                st.session_state['edit_appointment_id'] = appointment[0]
                                st.rerun()
                    else:
                        # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–æ–≤ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
                        appointments_text = f"{len(slot_appointments)} –ø—Ä–∏–µ–º–∞:\n"
                        for apt in slot_appointments:
                            client = get_initials(f"{apt[10]} {apt[11]}")
                            appointments_text += f"‚Ä¢ {client}\n"
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è —Ñ–æ–Ω–∞
                        first_doctor = f"{slot_appointments[0][13]} {slot_appointments[0][14]}"
                        bg_color = get_doctor_color(first_doctor)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∏–µ–º–∞–º–∏
                        if st.button(
                            f"üìã {len(slot_appointments)}\n{appointments_text.strip()}",
                            key=f"week_multi_{current_day}_{time_slot}",
                            help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                            use_container_width=True
                        ):
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                            st.session_state['multi_appointment_slot'] = {
                                'date': current_day,
                                'time': time_slot,
                                'appointments': slot_appointments
                            }
                            st.rerun()
                else:
                    # –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç - —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π "+"
                    st.markdown("""
                    <div style="
                        min-height: 65px;
                        height: 65px;
                        width: 100%;
                        box-sizing: border-box;
                        margin: 1px;
                        padding: 4px 3px;
                        border: 1px dashed #ddd;
                        background-color: #f9f9f9;
                        border-radius: 6px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 16px;
                        color: #ccc;
                        text-align: center;
                    ">
                        +
                    </div>
                    """, unsafe_allow_html=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CRM —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–∏ 2.0"""
    st.set_page_config(
        page_title="CRM –°–∏—Å—Ç–µ–º–∞ v2.0 - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¶–µ–Ω—Ç—Ä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    if 'authenticated' not in st.session_state or not st.session_state['authenticated']:
        from auth import login_page
        login_page()
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üè• CRM –°–∏—Å—Ç–µ–º–∞ v2.0 - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¶–µ–Ω—Ç—Ä")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–µ–º–æ–≤
    if 'multi_appointment_slot' in st.session_state:
        slot_info = st.session_state['multi_appointment_slot']
        st.subheader(f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        st.info(f"–î–∞—Ç–∞: {slot_info['date'].strftime('%d.%m.%Y')} | –í—Ä–µ–º—è: {slot_info['time'].strftime('%H:%M')}")
        
        for appointment in slot_info['appointments']:
            status = appointment[6]
            status_emoji = get_status_emoji(status)
            client_name = f"{appointment[10]} {appointment[11]}"
            doctor_name = f"{appointment[13]} {appointment[14]}"
            service_name = appointment[16]
            
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"{status_emoji} **{client_name}** | –í—Ä–∞—á: {doctor_name} | {service_name}")
            with col2:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"select_apt_{appointment[0]}"):
                    st.session_state['edit_appointment_id'] = appointment[0]
                    del st.session_state['multi_appointment_slot']
                    st.rerun()
        
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_multi_select"):
            del st.session_state['multi_appointment_slot']
            st.rerun()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–∏–µ–º–∞
    elif 'edit_appointment_id' in st.session_state:
        show_appointment_form(appointment_id=st.session_state['edit_appointment_id'])
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_edit_form"):
            del st.session_state['edit_appointment_id']
            st.rerun()
    elif 'new_appointment_date' in st.session_state and 'new_appointment_time' in st.session_state:
        show_appointment_form(
            selected_date=st.session_state['new_appointment_date'],
            selected_time=st.session_state['new_appointment_time']
        )
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_new_form"):
            del st.session_state['new_appointment_date']
            del st.session_state['new_appointment_time']
            st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        show_calendar_view()

if __name__ == "__main__":
    main()
