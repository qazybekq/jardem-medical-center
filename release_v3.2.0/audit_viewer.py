#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from database import get_connection

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏—Ç–∞"""
    st.title("üìã –ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –§–∏–ª—å—Ç—Ä—ã
    with st.sidebar:
        st.header("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        # –ü–µ—Ä–∏–æ–¥
        date_range = st.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            value=(date.today() - timedelta(days=7), date.today()),
            key="audit_date_range"
        )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users = get_all_users()
        selected_users = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            options=[u[0] for u in users],
            default=[u[0] for u in users],
            format_func=lambda x: next((u[1] for u in users if u[0] == x), x),
            key="audit_users"
        )
        
        # –î–µ–π—Å—Ç–≤–∏—è
        actions = ['LOGIN', 'LOGOUT', 'CREATE', 'UPDATE', 'DELETE']
        selected_actions = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            options=actions,
            default=actions,
            key="audit_actions"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if len(date_range) == 2:
        start_date, end_date = date_range
        df = get_audit_data(start_date, end_date, selected_users, selected_actions)
        
        if df.empty:
            st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        show_audit_statistics(df)
        
        st.markdown("---")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
        show_audit_table(df)
        
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, name, username
        FROM users
        ORDER BY name
    ''')
    
    results = cursor.fetchall()
    conn.close()
    return results

def get_audit_data(start_date, end_date, user_ids, actions):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞"""
    conn = get_connection()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    start_datetime = datetime.combine(start_date, datetime.min.time())
    end_datetime = datetime.combine(end_date, datetime.max.time())
    
    query = '''
        SELECT 
            al.id,
            al.timestamp,
            al.action,
            al.table_name,
            al.record_id,
            al.old_values,
            al.new_values,
            u.name as user_name,
            u.username
        FROM audit_log al
        LEFT JOIN users u ON al.user_id = u.id
        WHERE DATE(al.timestamp) BETWEEN DATE(?) AND DATE(?)
    '''
    
    params = [start_date, end_date]
    
    if user_ids:
        placeholders = ','.join(['?' for _ in user_ids])
        query += f' AND al.user_id IN ({placeholders})'
        params.extend(user_ids)
    
    if actions:
        placeholders = ','.join(['?' for _ in actions])
        query += f' AND al.action IN ({placeholders})'
        params.extend(actions)
    
    query += ' ORDER BY al.timestamp DESC'
    
    df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    
    return df

def show_audit_statistics(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–∞"""
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    # –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π
    with col1:
        total_events = len(df)
        st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", total_events)
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    with col2:
        unique_users = df['user_name'].nunique()
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", unique_users)
    
    # –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π
    with col3:
        created = len(df[df['action'] == 'CREATE'])
        st.metric("–°–æ–∑–¥–∞–Ω–æ", created)
    
    # –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π
    with col4:
        deleted = len(df[df['action'] == 'DELETE'])
        st.metric("–£–¥–∞–ª–µ–Ω–æ", deleted)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("---")
    
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        st.subheader("üìà –ü–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏–π")
        action_counts = df['action'].value_counts()
        st.bar_chart(action_counts)
    
    with col_chart2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        st.subheader("üë• –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        user_counts = df['user_name'].value_counts()
        st.bar_chart(user_counts)

def show_audit_table(df):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞—É–¥–∏—Ç–∞"""
    st.subheader("üìã –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = df[[
        'timestamp', 'user_name', 'action', 'table_name', 'record_id'
    ]].copy()
    
    display_df.columns = [
        '–í—Ä–µ–º—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–î–µ–π—Å—Ç–≤–∏–µ', '–¢–∞–±–ª–∏—Ü–∞', 'ID –∑–∞–ø–∏—Å–∏'
    ]
    
    # –†–∞—Å–∫—Ä–∞—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    def highlight_action(row):
        action = row['–î–µ–π—Å—Ç–≤–∏–µ']
        if action == 'CREATE':
            return ['background-color: #d4edda'] * len(row)
        elif action == 'DELETE':
            return ['background-color: #f8d7da'] * len(row)
        elif action == 'UPDATE':
            return ['background-color: #fff3cd'] * len(row)
        elif action == 'LOGIN':
            return ['background-color: #d1ecf1'] * len(row)
        else:
            return [''] * len(row)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    items_per_page = 50
    total_pages = (len(display_df) - 1) // items_per_page + 1
    
    page = st.number_input(
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞",
        min_value=1,
        max_value=total_pages,
        value=1,
        key="audit_page"
    )
    
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    
    st.dataframe(
        display_df.iloc[start_idx:end_idx].style.apply(highlight_action, axis=1),
        use_container_width=True,
        hide_index=True
    )
    
    st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_idx + 1}-{min(end_idx, len(display_df))} –∏–∑ {len(display_df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    st.markdown("---")
    st.subheader("üîç –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è")
    
    selected_id = st.number_input(
        "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        min_value=1,
        max_value=len(df),
        value=1,
        key="audit_detail_id"
    )
    
    if selected_id and selected_id <= len(df):
        event = df.iloc[selected_id - 1]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–í—Ä–µ–º—è:**", event['timestamp'])
            st.write("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**", event['user_name'])
            st.write("**–î–µ–π—Å—Ç–≤–∏–µ:**", event['action'])
        
        with col2:
            st.write("**–¢–∞–±–ª–∏—Ü–∞:**", event['table_name'])
            st.write("**ID –∑–∞–ø–∏—Å–∏:**", event['record_id'])
        
        if pd.notna(event['old_values']) and event['old_values']:
            st.write("**–°—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
            st.code(event['old_values'], language='json')
        
        if pd.notna(event['new_values']) and event['new_values']:
            st.write("**–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
            st.code(event['new_values'], language='json')

if __name__ == "__main__":
    main()

